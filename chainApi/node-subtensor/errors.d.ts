// Generated by dedot cli

import type {
  GenericChainErrors,
  GenericPalletError,
  RpcVersion,
} from "dedot/types";

export interface ChainErrors<Rv extends RpcVersion>
  extends GenericChainErrors<Rv> {
  /**
   * Pallet `System`'s errors
   **/
  system: {
    /**
     * The name of specification does not match between the current runtime
     * and the new runtime.
     **/
    InvalidSpecName: GenericPalletError<Rv>;

    /**
     * The specification version is not allowed to decrease between the current runtime
     * and the new runtime.
     **/
    SpecVersionNeedsToIncrease: GenericPalletError<Rv>;

    /**
     * Failed to extract the runtime version from the new runtime.
     *
     * Either calling `Core_version` or decoding `RuntimeVersion` failed.
     **/
    FailedToExtractRuntimeVersion: GenericPalletError<Rv>;

    /**
     * Suicide called when the account has non-default composite data.
     **/
    NonDefaultComposite: GenericPalletError<Rv>;

    /**
     * There is a non-zero reference count preventing the account from being purged.
     **/
    NonZeroRefCount: GenericPalletError<Rv>;

    /**
     * The origin filter prevent the call to be dispatched.
     **/
    CallFiltered: GenericPalletError<Rv>;

    /**
     * A multi-block migration is ongoing and prevents the current code from being replaced.
     **/
    MultiBlockMigrationsOngoing: GenericPalletError<Rv>;

    /**
     * No upgrade authorized.
     **/
    NothingAuthorized: GenericPalletError<Rv>;

    /**
     * The submitted code is not authorized.
     **/
    Unauthorized: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Grandpa`'s errors
   **/
  grandpa: {
    /**
     * Attempt to signal GRANDPA pause when the authority set isn't live
     * (either paused or already pending pause).
     **/
    PauseFailed: GenericPalletError<Rv>;

    /**
     * Attempt to signal GRANDPA resume when the authority set isn't paused
     * (either live or already pending resume).
     **/
    ResumeFailed: GenericPalletError<Rv>;

    /**
     * Attempt to signal GRANDPA change with one already pending.
     **/
    ChangePending: GenericPalletError<Rv>;

    /**
     * Cannot signal forced change so soon after last.
     **/
    TooSoon: GenericPalletError<Rv>;

    /**
     * A key ownership proof provided as part of an equivocation report is invalid.
     **/
    InvalidKeyOwnershipProof: GenericPalletError<Rv>;

    /**
     * An equivocation proof provided as part of an equivocation report is invalid.
     **/
    InvalidEquivocationProof: GenericPalletError<Rv>;

    /**
     * A given equivocation report is valid but already previously reported.
     **/
    DuplicateOffenceReport: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Balances`'s errors
   **/
  balances: {
    /**
     * Vesting balance too high to send value.
     **/
    VestingBalance: GenericPalletError<Rv>;

    /**
     * Account liquidity restrictions prevent withdrawal.
     **/
    LiquidityRestrictions: GenericPalletError<Rv>;

    /**
     * Balance too low to send value.
     **/
    InsufficientBalance: GenericPalletError<Rv>;

    /**
     * Value too low to create account due to existential deposit.
     **/
    ExistentialDeposit: GenericPalletError<Rv>;

    /**
     * Transfer/payment would kill account.
     **/
    Expendability: GenericPalletError<Rv>;

    /**
     * A vesting schedule already exists for this account.
     **/
    ExistingVestingSchedule: GenericPalletError<Rv>;

    /**
     * Beneficiary account must pre-exist.
     **/
    DeadAccount: GenericPalletError<Rv>;

    /**
     * Number of named reserves exceed `MaxReserves`.
     **/
    TooManyReserves: GenericPalletError<Rv>;

    /**
     * Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`.
     **/
    TooManyHolds: GenericPalletError<Rv>;

    /**
     * Number of freezes exceed `MaxFreezes`.
     **/
    TooManyFreezes: GenericPalletError<Rv>;

    /**
     * The issuance cannot be modified since it is already deactivated.
     **/
    IssuanceDeactivated: GenericPalletError<Rv>;

    /**
     * The delta cannot be zero.
     **/
    DeltaZero: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `SubtensorModule`'s errors
   **/
  subtensorModule: {
    /**
     * The subnet does not exist.
     **/
    SubNetworkDoesNotExist: GenericPalletError<Rv>;

    /**
     * The root network does not exist.
     **/
    RootNetworkDoesNotExist: GenericPalletError<Rv>;

    /**
     * The user is trying to serve an axon which is not of type 4 (IPv4) or 6 (IPv6).
     **/
    InvalidIpType: GenericPalletError<Rv>;

    /**
     * An invalid IP address is passed to the serve function.
     **/
    InvalidIpAddress: GenericPalletError<Rv>;

    /**
     * An invalid port is passed to the serve function.
     **/
    InvalidPort: GenericPalletError<Rv>;

    /**
     * The hotkey is not registered in subnet
     **/
    HotKeyNotRegisteredInSubNet: GenericPalletError<Rv>;

    /**
     * The hotkey does not exists
     **/
    HotKeyAccountNotExists: GenericPalletError<Rv>;

    /**
     * The hotkey is not registered in any subnet.
     **/
    HotKeyNotRegisteredInNetwork: GenericPalletError<Rv>;

    /**
     * Request to stake, unstake or subscribe is made by a coldkey that is not associated with
     * the hotkey account.
     **/
    NonAssociatedColdKey: GenericPalletError<Rv>;

    /**
     * DEPRECATED: Stake amount to withdraw is zero.
     * The caller does not have enought stake to perform this action.
     **/
    NotEnoughStake: GenericPalletError<Rv>;

    /**
     * The caller is requesting removing more stake than there exists in the staking account.
     * See: "[remove_stake()]".
     **/
    NotEnoughStakeToWithdraw: GenericPalletError<Rv>;

    /**
     * The caller is requesting to set weights but the caller has less than minimum stake
     * required to set weights (less than WeightsMinStake).
     **/
    NotEnoughStakeToSetWeights: GenericPalletError<Rv>;

    /**
     * The parent hotkey doesn't have enough own stake to set childkeys.
     **/
    NotEnoughStakeToSetChildkeys: GenericPalletError<Rv>;

    /**
     * The caller is requesting adding more stake than there exists in the coldkey account.
     * See: "[add_stake()]"
     **/
    NotEnoughBalanceToStake: GenericPalletError<Rv>;

    /**
     * The caller is trying to add stake, but for some reason the requested amount could not be
     * withdrawn from the coldkey account.
     **/
    BalanceWithdrawalError: GenericPalletError<Rv>;

    /**
     * Unsuccessfully withdraw, balance could be zero (can not make account exist) after
     * withdrawal.
     **/
    ZeroBalanceAfterWithdrawn: GenericPalletError<Rv>;

    /**
     * The caller is attempting to set non-self weights without being a permitted validator.
     **/
    NeuronNoValidatorPermit: GenericPalletError<Rv>;

    /**
     * The caller is attempting to set the weight keys and values but these vectors have
     * different size.
     **/
    WeightVecNotEqualSize: GenericPalletError<Rv>;

    /**
     * The caller is attempting to set weights with duplicate UIDs in the weight matrix.
     **/
    DuplicateUids: GenericPalletError<Rv>;

    /**
     * The caller is attempting to set weight to at least one UID that does not exist in the
     * metagraph.
     **/
    UidVecContainInvalidOne: GenericPalletError<Rv>;

    /**
     * The dispatch is attempting to set weights on chain with fewer elements than are allowed.
     **/
    WeightVecLengthIsLow: GenericPalletError<Rv>;

    /**
     * Number of registrations in this block exceeds the allowed number (i.e., exceeds the
     * subnet hyperparameter "max_regs_per_block").
     **/
    TooManyRegistrationsThisBlock: GenericPalletError<Rv>;

    /**
     * The caller is requesting registering a neuron which already exists in the active set.
     **/
    HotKeyAlreadyRegisteredInSubNet: GenericPalletError<Rv>;

    /**
     * The new hotkey is the same as old one
     **/
    NewHotKeyIsSameWithOld: GenericPalletError<Rv>;

    /**
     * The supplied PoW hash block is in the future or negative.
     **/
    InvalidWorkBlock: GenericPalletError<Rv>;

    /**
     * The supplied PoW hash block does not meet the network difficulty.
     **/
    InvalidDifficulty: GenericPalletError<Rv>;

    /**
     * The supplied PoW hash seal does not match the supplied work.
     **/
    InvalidSeal: GenericPalletError<Rv>;

    /**
     * The dispatch is attempting to set weights on chain with weight value exceeding the
     * MaxWeightLimit (max_weight_limit subnet hyperparameter).
     **/
    MaxWeightExceeded: GenericPalletError<Rv>;

    /**
     * The hotkey is attempting to become a delegate when the hotkey is already a delegate.
     **/
    HotKeyAlreadyDelegate: GenericPalletError<Rv>;

    /**
     * A transactor exceeded the rate limit for setting weights.
     **/
    SettingWeightsTooFast: GenericPalletError<Rv>;

    /**
     * A validator is attempting to set weights from a validator with incorrect weight version.
     **/
    IncorrectWeightVersionKey: GenericPalletError<Rv>;

    /**
     * An axon or prometheus serving exceeded the rate limit for a registered neuron.
     **/
    ServingRateLimitExceeded: GenericPalletError<Rv>;

    /**
     * The caller is attempting to set weights with more UIDs than allowed.
     **/
    UidsLengthExceedUidsInSubNet: GenericPalletError<Rv>;

    /**
     * A transactor exceeded the rate limit for add network transaction.
     **/
    NetworkTxRateLimitExceeded: GenericPalletError<Rv>;

    /**
     * A transactor exceeded the rate limit for delegate transaction.
     **/
    DelegateTxRateLimitExceeded: GenericPalletError<Rv>;

    /**
     * A transactor exceeded the rate limit for setting or swapping hotkey.
     **/
    HotKeySetTxRateLimitExceeded: GenericPalletError<Rv>;

    /**
     * A transactor exceeded the rate limit for staking.
     **/
    StakingRateLimitExceeded: GenericPalletError<Rv>;

    /**
     * Registration is disabled.
     **/
    SubNetRegistrationDisabled: GenericPalletError<Rv>;

    /**
     * The number of registration attempts exceeded the allowed number in the interval.
     **/
    TooManyRegistrationsThisInterval: GenericPalletError<Rv>;

    /**
     * The hotkey is required to be the origin.
     **/
    TransactorAccountShouldBeHotKey: GenericPalletError<Rv>;

    /**
     * A hotkey is attempting to do something only senate members can do.
     **/
    NotSenateMember: GenericPalletError<Rv>;

    /**
     * Faucet is disabled.
     **/
    FaucetDisabled: GenericPalletError<Rv>;

    /**
     * Not a subnet owner.
     **/
    NotSubnetOwner: GenericPalletError<Rv>;

    /**
     * Operation is not permitted on the root subnet.
     **/
    RegistrationNotPermittedOnRootSubnet: GenericPalletError<Rv>;

    /**
     * A hotkey with too little stake is attempting to join the root subnet.
     **/
    StakeTooLowForRoot: GenericPalletError<Rv>;

    /**
     * All subnets are in the immunity period.
     **/
    AllNetworksInImmunity: GenericPalletError<Rv>;

    /**
     * Not enough balance to pay swapping hotkey.
     **/
    NotEnoughBalanceToPaySwapHotKey: GenericPalletError<Rv>;

    /**
     * Netuid does not match for setting root network weights.
     **/
    NotRootSubnet: GenericPalletError<Rv>;

    /**
     * Can not set weights for the root network.
     **/
    CanNotSetRootNetworkWeights: GenericPalletError<Rv>;

    /**
     * No neuron ID is available.
     **/
    NoNeuronIdAvailable: GenericPalletError<Rv>;

    /**
     * Delegate take is too low.
     **/
    DelegateTakeTooLow: GenericPalletError<Rv>;

    /**
     * Delegate take is too high.
     **/
    DelegateTakeTooHigh: GenericPalletError<Rv>;

    /**
     * No commit found for the provided hotkey+netuid combination when attempting to reveal the
     * weights.
     **/
    NoWeightsCommitFound: GenericPalletError<Rv>;

    /**
     * Committed hash does not equal the hashed reveal data.
     **/
    InvalidRevealCommitHashNotMatch: GenericPalletError<Rv>;

    /**
     * Attempting to call set_weights when commit/reveal is enabled
     **/
    CommitRevealEnabled: GenericPalletError<Rv>;

    /**
     * Attemtping to commit/reveal weights when disabled.
     **/
    CommitRevealDisabled: GenericPalletError<Rv>;

    /**
     * Not able to join the senate.
     **/
    CouldNotJoinSenate: GenericPalletError<Rv>;

    /**
     * Attempting to set alpha high/low while disabled
     **/
    LiquidAlphaDisabled: GenericPalletError<Rv>;

    /**
     * Alpha high is too low: alpha_high > 0.8
     **/
    AlphaHighTooLow: GenericPalletError<Rv>;

    /**
     * Alpha low is out of range: alpha_low > 0 && alpha_low < 0.8
     **/
    AlphaLowOutOfRange: GenericPalletError<Rv>;

    /**
     * The coldkey has already been swapped
     **/
    ColdKeyAlreadyAssociated: GenericPalletError<Rv>;

    /**
     * The coldkey balance is not enough to pay for the swap
     **/
    NotEnoughBalanceToPaySwapColdKey: GenericPalletError<Rv>;

    /**
     * The coldkey is in arbitration
     **/
    ColdkeyIsInArbitration: GenericPalletError<Rv>;

    /**
     * Attempting to set an invalid child for a hotkey on a network.
     **/
    InvalidChild: GenericPalletError<Rv>;

    /**
     * Duplicate child when setting children.
     **/
    DuplicateChild: GenericPalletError<Rv>;

    /**
     * Proportion overflow when setting children.
     **/
    ProportionOverflow: GenericPalletError<Rv>;

    /**
     * Too many children MAX 5.
     **/
    TooManyChildren: GenericPalletError<Rv>;

    /**
     * Default transaction rate limit exceeded.
     **/
    TxRateLimitExceeded: GenericPalletError<Rv>;

    /**
     * Swap already scheduled.
     **/
    SwapAlreadyScheduled: GenericPalletError<Rv>;

    /**
     * failed to swap coldkey
     **/
    FailedToSchedule: GenericPalletError<Rv>;

    /**
     * New coldkey is hotkey
     **/
    NewColdKeyIsHotkey: GenericPalletError<Rv>;

    /**
     * Childkey take is invalid.
     **/
    InvalidChildkeyTake: GenericPalletError<Rv>;

    /**
     * Childkey take rate limit exceeded.
     **/
    TxChildkeyTakeRateLimitExceeded: GenericPalletError<Rv>;

    /**
     * Invalid identity.
     **/
    InvalidIdentity: GenericPalletError<Rv>;

    /**
     * Trying to register a subnet into a mechanism that does not exist.
     **/
    MechanismDoesNotExist: GenericPalletError<Rv>;

    /**
     * Trying to unstake your lock amount.
     **/
    CannotUnstakeLock: GenericPalletError<Rv>;

    /**
     * Trying to perform action on non-existent subnet.
     **/
    SubnetNotExists: GenericPalletError<Rv>;

    /**
     * Maximum commit limit reached
     **/
    TooManyUnrevealedCommits: GenericPalletError<Rv>;

    /**
     * Attempted to reveal weights that are expired.
     **/
    ExpiredWeightCommit: GenericPalletError<Rv>;

    /**
     * Attempted to reveal weights too early.
     **/
    RevealTooEarly: GenericPalletError<Rv>;

    /**
     * Attempted to batch reveal weights with mismatched vector input lenghts.
     **/
    InputLengthsUnequal: GenericPalletError<Rv>;

    /**
     * A transactor exceeded the rate limit for setting weights.
     **/
    CommittingWeightsTooFast: GenericPalletError<Rv>;

    /**
     * Stake amount is too low.
     **/
    AmountTooLow: GenericPalletError<Rv>;

    /**
     * Not enough liquidity.
     **/
    InsufficientLiquidity: GenericPalletError<Rv>;

    /**
     * Slippage is too high for the transaction.
     **/
    SlippageTooHigh: GenericPalletError<Rv>;

    /**
     * Subnet disallows transfer.
     **/
    TransferDisallowed: GenericPalletError<Rv>;

    /**
     * Activity cutoff is being set too low.
     **/
    ActivityCutoffTooLow: GenericPalletError<Rv>;

    /**
     * Call is disabled
     **/
    CallDisabled: GenericPalletError<Rv>;

    /**
     * FirstEmissionBlockNumber is already set.
     **/
    FirstEmissionBlockNumberAlreadySet: GenericPalletError<Rv>;

    /**
     * need wait for more blocks to accept the start call extrinsic.
     **/
    NeedWaitingMoreBlocksToStarCall: GenericPalletError<Rv>;

    /**
     * Not enough AlphaOut on the subnet to recycle
     **/
    NotEnoughAlphaOutToRecycle: GenericPalletError<Rv>;

    /**
     * Cannot burn or recycle TAO from root subnet
     **/
    CannotBurnOrRecycleOnRootSubnet: GenericPalletError<Rv>;

    /**
     * Public key cannot be recovered.
     **/
    UnableToRecoverPublicKey: GenericPalletError<Rv>;

    /**
     * Recovered public key is invalid.
     **/
    InvalidRecoveredPublicKey: GenericPalletError<Rv>;

    /**
     * SubToken disabled now
     **/
    SubtokenDisabled: GenericPalletError<Rv>;

    /**
     * Too frequent hotkey swap on subnet
     **/
    HotKeySwapOnSubnetIntervalNotPassed: GenericPalletError<Rv>;

    /**
     * Zero max stake amount
     **/
    ZeroMaxStakeAmount: GenericPalletError<Rv>;

    /**
     * Invalid netuid duplication
     **/
    SameNetuid: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Triumvirate`'s errors
   **/
  triumvirate: {
    /**
     * Account is not a member of collective
     **/
    NotMember: GenericPalletError<Rv>;

    /**
     * Duplicate proposals not allowed
     **/
    DuplicateProposal: GenericPalletError<Rv>;

    /**
     * Proposal must exist
     **/
    ProposalNotExists: GenericPalletError<Rv>;

    /**
     * Index mismatched the proposal hash
     **/
    IndexMismatchProposalHash: GenericPalletError<Rv>;

    /**
     * Duplicate vote ignored
     **/
    DuplicateVote: GenericPalletError<Rv>;

    /**
     * The call to close the proposal was made too early, before the end of the voting
     **/
    TooEarlyToCloseProposal: GenericPalletError<Rv>;

    /**
     * There can only be a maximum of `MaxProposals` active proposals.
     **/
    TooManyActiveProposals: GenericPalletError<Rv>;

    /**
     * The given weight-bound for the proposal was too low.
     **/
    ProposalWeightLessThanDispatchCallWeight: GenericPalletError<Rv>;

    /**
     * The given length-bound for the proposal was too low.
     **/
    ProposalLengthBoundLessThanProposalLength: GenericPalletError<Rv>;

    /**
     * The given motion duration for the proposal was too low.
     **/
    DurationLowerThanConfiguredMotionDuration: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `TriumvirateMembers`'s errors
   **/
  triumvirateMembers: {
    /**
     * Already a member.
     **/
    AlreadyMember: GenericPalletError<Rv>;

    /**
     * Not a member.
     **/
    NotMember: GenericPalletError<Rv>;

    /**
     * Too many members.
     **/
    TooManyMembers: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `SenateMembers`'s errors
   **/
  senateMembers: {
    /**
     * Already a member.
     **/
    AlreadyMember: GenericPalletError<Rv>;

    /**
     * Not a member.
     **/
    NotMember: GenericPalletError<Rv>;

    /**
     * Too many members.
     **/
    TooManyMembers: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Utility`'s errors
   **/
  utility: {
    /**
     * Too many calls batched.
     **/
    TooManyCalls: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Sudo`'s errors
   **/
  sudo: {
    /**
     * Sender must be the Sudo account.
     **/
    RequireSudo: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Multisig`'s errors
   **/
  multisig: {
    /**
     * Threshold must be 2 or greater.
     **/
    MinimumThreshold: GenericPalletError<Rv>;

    /**
     * Call is already approved by this signatory.
     **/
    AlreadyApproved: GenericPalletError<Rv>;

    /**
     * Call doesn't need any (more) approvals.
     **/
    NoApprovalsNeeded: GenericPalletError<Rv>;

    /**
     * There are too few signatories in the list.
     **/
    TooFewSignatories: GenericPalletError<Rv>;

    /**
     * There are too many signatories in the list.
     **/
    TooManySignatories: GenericPalletError<Rv>;

    /**
     * The signatories were provided out of order; they should be ordered.
     **/
    SignatoriesOutOfOrder: GenericPalletError<Rv>;

    /**
     * The sender was contained in the other signatories; it shouldn't be.
     **/
    SenderInSignatories: GenericPalletError<Rv>;

    /**
     * Multisig operation not found when attempting to cancel.
     **/
    NotFound: GenericPalletError<Rv>;

    /**
     * Only the account that originally created the multisig is able to cancel it.
     **/
    NotOwner: GenericPalletError<Rv>;

    /**
     * No timepoint was given, yet the multisig operation is already underway.
     **/
    NoTimepoint: GenericPalletError<Rv>;

    /**
     * A different timepoint was given to the multisig operation that is underway.
     **/
    WrongTimepoint: GenericPalletError<Rv>;

    /**
     * A timepoint was given, yet no multisig operation is underway.
     **/
    UnexpectedTimepoint: GenericPalletError<Rv>;

    /**
     * The maximum weight information provided was too low.
     **/
    MaxWeightTooLow: GenericPalletError<Rv>;

    /**
     * The data to be stored is already stored.
     **/
    AlreadyStored: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Preimage`'s errors
   **/
  preimage: {
    /**
     * Preimage is too large to store on-chain.
     **/
    TooBig: GenericPalletError<Rv>;

    /**
     * Preimage has already been noted on-chain.
     **/
    AlreadyNoted: GenericPalletError<Rv>;

    /**
     * The user is not authorized to perform this action.
     **/
    NotAuthorized: GenericPalletError<Rv>;

    /**
     * The preimage cannot be removed since it has not yet been noted.
     **/
    NotNoted: GenericPalletError<Rv>;

    /**
     * A preimage may not be removed when there are outstanding requests.
     **/
    Requested: GenericPalletError<Rv>;

    /**
     * The preimage request cannot be removed since no outstanding requests exist.
     **/
    NotRequested: GenericPalletError<Rv>;

    /**
     * More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once.
     **/
    TooMany: GenericPalletError<Rv>;

    /**
     * Too few hashes were requested to be upgraded (i.e. zero).
     **/
    TooFew: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Scheduler`'s errors
   **/
  scheduler: {
    /**
     * Failed to schedule a call
     **/
    FailedToSchedule: GenericPalletError<Rv>;

    /**
     * Cannot find the scheduled call.
     **/
    NotFound: GenericPalletError<Rv>;

    /**
     * Given target block number is in the past.
     **/
    TargetBlockNumberInPast: GenericPalletError<Rv>;

    /**
     * Reschedule failed because it does not change scheduled time.
     **/
    RescheduleNoChange: GenericPalletError<Rv>;

    /**
     * Attempt to use a non-named function on a named task.
     **/
    Named: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Proxy`'s errors
   **/
  proxy: {
    /**
     * There are too many proxies registered or too many announcements pending.
     **/
    TooMany: GenericPalletError<Rv>;

    /**
     * Proxy registration not found.
     **/
    NotFound: GenericPalletError<Rv>;

    /**
     * Sender is not a proxy of the account to be proxied.
     **/
    NotProxy: GenericPalletError<Rv>;

    /**
     * A call which is incompatible with the proxy type's filter was attempted.
     **/
    Unproxyable: GenericPalletError<Rv>;

    /**
     * Account is already a proxy.
     **/
    Duplicate: GenericPalletError<Rv>;

    /**
     * Call may not be made by proxy because it may escalate its privileges.
     **/
    NoPermission: GenericPalletError<Rv>;

    /**
     * Announcement, if made at all, was made too recently.
     **/
    Unannounced: GenericPalletError<Rv>;

    /**
     * Cannot add self as proxy.
     **/
    NoSelfProxy: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Registry`'s errors
   **/
  registry: {
    /**
     * Account attempted to register an identity but does not meet the requirements.
     **/
    CannotRegister: GenericPalletError<Rv>;

    /**
     * Account passed too many additional fields to their identity
     **/
    TooManyFieldsInIdentityInfo: GenericPalletError<Rv>;

    /**
     * Account doesn't have a registered identity
     **/
    NotRegistered: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Commitments`'s errors
   **/
  commitments: {
    /**
     * Account passed too many additional fields to their commitment
     **/
    TooManyFieldsInCommitmentInfo: GenericPalletError<Rv>;

    /**
     * Account is not allowed to make commitments to the chain
     **/
    AccountNotAllowedCommit: GenericPalletError<Rv>;

    /**
     * Space Limit Exceeded for the current interval
     **/
    SpaceLimitExceeded: GenericPalletError<Rv>;

    /**
     * Indicates that unreserve returned a leftover, which is unexpected.
     **/
    UnexpectedUnreserveLeftover: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `AdminUtils`'s errors
   **/
  adminUtils: {
    /**
     * The subnet does not exist, check the netuid parameter
     **/
    SubnetDoesNotExist: GenericPalletError<Rv>;

    /**
     * The maximum number of subnet validators must be less than the maximum number of allowed UIDs in the subnet.
     **/
    MaxValidatorsLargerThanMaxUIds: GenericPalletError<Rv>;

    /**
     * The maximum number of subnet validators must be more than the current number of UIDs already in the subnet.
     **/
    MaxAllowedUIdsLessThanCurrentUIds: GenericPalletError<Rv>;

    /**
     * The maximum value for bonds moving average is reached
     **/
    BondsMovingAverageMaxReached: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `SafeMode`'s errors
   **/
  safeMode: {
    /**
     * The safe-mode is (already or still) entered.
     **/
    Entered: GenericPalletError<Rv>;

    /**
     * The safe-mode is (already or still) exited.
     **/
    Exited: GenericPalletError<Rv>;

    /**
     * This functionality of the pallet is disabled by the configuration.
     **/
    NotConfigured: GenericPalletError<Rv>;

    /**
     * There is no balance reserved.
     **/
    NoDeposit: GenericPalletError<Rv>;

    /**
     * The account already has a deposit reserved and can therefore not enter or extend again.
     **/
    AlreadyDeposited: GenericPalletError<Rv>;

    /**
     * This deposit cannot be released yet.
     **/
    CannotReleaseYet: GenericPalletError<Rv>;

    /**
     * An error from the underlying `Currency`.
     **/
    CurrencyError: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Ethereum`'s errors
   **/
  ethereum: {
    /**
     * Signature is invalid.
     **/
    InvalidSignature: GenericPalletError<Rv>;

    /**
     * Pre-log is present, therefore transact is not allowed.
     **/
    PreLogExists: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `EVM`'s errors
   **/
  evm: {
    /**
     * Not enough balance to perform action
     **/
    BalanceLow: GenericPalletError<Rv>;

    /**
     * Calculating total fee overflowed
     **/
    FeeOverflow: GenericPalletError<Rv>;

    /**
     * Calculating total payment overflowed
     **/
    PaymentOverflow: GenericPalletError<Rv>;

    /**
     * Withdraw fee failed
     **/
    WithdrawFailed: GenericPalletError<Rv>;

    /**
     * Gas price is too low.
     **/
    GasPriceTooLow: GenericPalletError<Rv>;

    /**
     * Nonce is invalid
     **/
    InvalidNonce: GenericPalletError<Rv>;

    /**
     * Gas limit is too low.
     **/
    GasLimitTooLow: GenericPalletError<Rv>;

    /**
     * Gas limit is too high.
     **/
    GasLimitTooHigh: GenericPalletError<Rv>;

    /**
     * The chain id is invalid.
     **/
    InvalidChainId: GenericPalletError<Rv>;

    /**
     * the signature is invalid.
     **/
    InvalidSignature: GenericPalletError<Rv>;

    /**
     * EVM reentrancy
     **/
    Reentrancy: GenericPalletError<Rv>;

    /**
     * EIP-3607,
     **/
    TransactionMustComeFromEOA: GenericPalletError<Rv>;

    /**
     * Undefined error.
     **/
    Undefined: GenericPalletError<Rv>;

    /**
     * Origin is not allowed to perform the operation.
     **/
    NotAllowed: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Drand`'s errors
   **/
  drand: {
    /**
     * The value retrieved was `None` as no value was previously set.
     **/
    NoneValue: GenericPalletError<Rv>;

    /**
     * There was an attempt to increment the value in storage over `u32::MAX`.
     **/
    StorageOverflow: GenericPalletError<Rv>;

    /**
     * failed to connect to the
     **/
    DrandConnectionFailure: GenericPalletError<Rv>;

    /**
     * the pulse is invalid
     **/
    UnverifiedPulse: GenericPalletError<Rv>;

    /**
     * the round number did not increment
     **/
    InvalidRoundNumber: GenericPalletError<Rv>;

    /**
     * the pulse could not be verified
     **/
    PulseVerificationError: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Crowdloan`'s errors
   **/
  crowdloan: {
    /**
     * The crowdloan initial deposit is too low.
     **/
    DepositTooLow: GenericPalletError<Rv>;

    /**
     * The crowdloan cap is too low.
     **/
    CapTooLow: GenericPalletError<Rv>;

    /**
     * The minimum contribution is too low.
     **/
    MinimumContributionTooLow: GenericPalletError<Rv>;

    /**
     * The crowdloan cannot end in the past.
     **/
    CannotEndInPast: GenericPalletError<Rv>;

    /**
     * The crowdloan block duration is too short.
     **/
    BlockDurationTooShort: GenericPalletError<Rv>;

    /**
     * The block duration is too long.
     **/
    BlockDurationTooLong: GenericPalletError<Rv>;

    /**
     * The account does not have enough balance to pay for the initial deposit/contribution.
     **/
    InsufficientBalance: GenericPalletError<Rv>;

    /**
     * An overflow occurred.
     **/
    Overflow: GenericPalletError<Rv>;

    /**
     * The crowdloan id is invalid.
     **/
    InvalidCrowdloanId: GenericPalletError<Rv>;

    /**
     * The crowdloan cap has been fully raised.
     **/
    CapRaised: GenericPalletError<Rv>;

    /**
     * The contribution period has ended.
     **/
    ContributionPeriodEnded: GenericPalletError<Rv>;

    /**
     * The contribution is too low.
     **/
    ContributionTooLow: GenericPalletError<Rv>;

    /**
     * The origin of this call is invalid.
     **/
    InvalidOrigin: GenericPalletError<Rv>;

    /**
     * The crowdloan has already been finalized.
     **/
    AlreadyFinalized: GenericPalletError<Rv>;

    /**
     * The crowdloan contribution period has not ended yet.
     **/
    ContributionPeriodNotEnded: GenericPalletError<Rv>;

    /**
     * The contributor has no contribution for this crowdloan.
     **/
    NoContribution: GenericPalletError<Rv>;

    /**
     * The crowdloan cap has not been raised.
     **/
    CapNotRaised: GenericPalletError<Rv>;

    /**
     * An underflow occurred.
     **/
    Underflow: GenericPalletError<Rv>;

    /**
     * Call to dispatch was not found in the preimage storage.
     **/
    CallUnavailable: GenericPalletError<Rv>;

    /**
     * The crowdloan is not ready to be dissolved, it still has contributions.
     **/
    NotReadyToDissolve: GenericPalletError<Rv>;

    /**
     * The deposit cannot be withdrawn from the crowdloan.
     **/
    DepositCannotBeWithdrawn: GenericPalletError<Rv>;

    /**
     * The maximum number of contributors has been reached.
     **/
    MaxContributorsReached: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
}
