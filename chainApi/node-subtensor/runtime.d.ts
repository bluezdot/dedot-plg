// Generated by dedot cli

import type {
  GenericRuntimeApis,
  GenericRuntimeApiMethod,
  RpcVersion,
} from "dedot/types";
import type {
  RuntimeVersion,
  Header,
  DispatchError,
  Result,
  BytesLike,
  Bytes,
  H256,
  AccountId32Like,
  H160,
  U256,
  Permill,
  AccountId32,
} from "dedot/codecs";
import type {
  SpRuntimeBlock,
  SpRuntimeExtrinsicInclusionMode,
  SpCoreOpaqueMetadata,
  SpRuntimeTransactionValidityTransactionValidityError,
  FpSelfContainedUncheckedExtrinsic,
  SpInherentsInherentData,
  SpInherentsCheckInherentsResult,
  SpRuntimeTransactionValidityValidTransaction,
  SpRuntimeTransactionValidityTransactionSource,
  SpConsensusSlotsSlotDuration,
  SpConsensusAuraSr25519AppSr25519Public,
  SpCoreCryptoKeyTypeId,
  SpConsensusGrandpaAppPublic,
  SpConsensusGrandpaEquivocationProof,
  SpRuntimeOpaqueValue,
  PalletTransactionPaymentRuntimeDispatchInfo,
  PalletTransactionPaymentFeeDetails,
  SpWeightsWeightV2Weight,
  NodeSubtensorRuntimeRuntimeCallLike,
  EvmBackendBasic,
  FpEvmExecutionInfoV2,
  FpEvmExecutionInfoV2H160,
  EthereumBlock,
  EthereumReceiptReceiptV3,
  FpRpcTransactionStatus,
  EthereumTransactionTransactionV2,
  PalletSubtensorRpcInfoDelegateInfo,
  PalletSubtensorRpcInfoNeuronInfo,
  PalletSubtensorRpcInfoNeuronInfoNeuronInfoLite,
  PalletSubtensorRpcInfoSubnetInfo,
  PalletSubtensorRpcInfoSubnetInfoSubnetInfov2,
  PalletSubtensorRpcInfoSubnetInfoSubnetHyperparams,
  PalletSubtensorRpcInfoDynamicInfo,
  PalletSubtensorRpcInfoMetagraph,
  PalletSubtensorRpcInfoShowSubnetSubnetState,
  PalletSubtensorRpcInfoMetagraphSelectiveMetagraph,
  PalletSubtensorRpcInfoStakeInfo,
} from "./types";

export interface RuntimeApis<Rv extends RpcVersion>
  extends GenericRuntimeApis<Rv> {
  /**
   * @runtimeapi: Core - 0xdf6acb689907609b
   **/
  core: {
    /**
     * Returns the version of the runtime.
     *
     * @callname: Core_version
     **/
    version: GenericRuntimeApiMethod<Rv, () => Promise<RuntimeVersion>>;

    /**
     * Execute the given block.
     *
     * @callname: Core_execute_block
     * @param {SpRuntimeBlock} block
     **/
    executeBlock: GenericRuntimeApiMethod<
      Rv,
      (block: SpRuntimeBlock) => Promise<[]>
    >;

    /**
     * Initialize a block with the given header and return the runtime executive mode.
     *
     * @callname: Core_initialize_block
     * @param {Header} header
     **/
    initializeBlock: GenericRuntimeApiMethod<
      Rv,
      (header: Header) => Promise<SpRuntimeExtrinsicInclusionMode>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: Metadata - 0x37e397fc7c91f5e4
   **/
  metadata: {
    /**
     * Returns the metadata of a runtime.
     *
     * @callname: Metadata_metadata
     **/
    metadata: GenericRuntimeApiMethod<Rv, () => Promise<SpCoreOpaqueMetadata>>;

    /**
     * Returns the metadata at a given version.
     *
     * If the given `version` isn't supported, this will return `None`.
     * Use [`Self::metadata_versions`] to find out about supported metadata version of the runtime.
     *
     * @callname: Metadata_metadata_at_version
     * @param {number} version
     **/
    metadataAtVersion: GenericRuntimeApiMethod<
      Rv,
      (version: number) => Promise<SpCoreOpaqueMetadata | undefined>
    >;

    /**
     * Returns the supported metadata versions.
     *
     * This can be used to call `metadata_at_version`.
     *
     * @callname: Metadata_metadata_versions
     **/
    metadataVersions: GenericRuntimeApiMethod<Rv, () => Promise<Array<number>>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: BlockBuilder - 0x40fe3ad401f8959a
   **/
  blockBuilder: {
    /**
     * Apply the given extrinsic.
     *
     * Returns an inclusion outcome which specifies if this extrinsic is included in
     * this block or not.
     *
     * @callname: BlockBuilder_apply_extrinsic
     * @param {FpSelfContainedUncheckedExtrinsic} extrinsic
     **/
    applyExtrinsic: GenericRuntimeApiMethod<
      Rv,
      (
        extrinsic: FpSelfContainedUncheckedExtrinsic,
      ) => Promise<
        Result<
          Result<[], DispatchError>,
          SpRuntimeTransactionValidityTransactionValidityError
        >
      >
    >;

    /**
     * Finish the current block.
     *
     * @callname: BlockBuilder_finalize_block
     **/
    finalizeBlock: GenericRuntimeApiMethod<Rv, () => Promise<Header>>;

    /**
     * Generate inherent extrinsics. The inherent data will vary from chain to chain.
     *
     * @callname: BlockBuilder_inherent_extrinsics
     * @param {SpInherentsInherentData} inherent
     **/
    inherentExtrinsics: GenericRuntimeApiMethod<
      Rv,
      (
        inherent: SpInherentsInherentData,
      ) => Promise<Array<FpSelfContainedUncheckedExtrinsic>>
    >;

    /**
     * Check that the inherents are valid. The inherent data will vary from chain to chain.
     *
     * @callname: BlockBuilder_check_inherents
     * @param {SpRuntimeBlock} block
     * @param {SpInherentsInherentData} data
     **/
    checkInherents: GenericRuntimeApiMethod<
      Rv,
      (
        block: SpRuntimeBlock,
        data: SpInherentsInherentData,
      ) => Promise<SpInherentsCheckInherentsResult>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: GenesisBuilder - 0xfbc577b9d747efd6
   **/
  genesisBuilder: {
    /**
     * Build `RuntimeGenesisConfig` from a JSON blob not using any defaults and store it in the
     * storage.
     *
     * In the case of a FRAME-based runtime, this function deserializes the full `RuntimeGenesisConfig` from the given JSON blob and
     * puts it into the storage. If the provided JSON blob is incorrect or incomplete or the
     * deserialization fails, an error is returned.
     *
     * Please note that provided JSON blob must contain all `RuntimeGenesisConfig` fields, no
     * defaults will be used.
     *
     * @callname: GenesisBuilder_build_state
     * @param {BytesLike} json
     **/
    buildState: GenericRuntimeApiMethod<
      Rv,
      (json: BytesLike) => Promise<Result<[], string>>
    >;

    /**
     * Returns a JSON blob representation of the built-in `RuntimeGenesisConfig` identified by
     * `id`.
     *
     * If `id` is `None` the function returns JSON blob representation of the default
     * `RuntimeGenesisConfig` struct of the runtime. Implementation must provide default
     * `RuntimeGenesisConfig`.
     *
     * Otherwise function returns a JSON representation of the built-in, named
     * `RuntimeGenesisConfig` preset identified by `id`, or `None` if such preset does not
     * exist. Returned `Vec<u8>` contains bytes of JSON blob (patch) which comprises a list of
     * (potentially nested) key-value pairs that are intended for customizing the default
     * runtime genesis config. The patch shall be merged (rfc7386) with the JSON representation
     * of the default `RuntimeGenesisConfig` to create a comprehensive genesis config that can
     * be used in `build_state` method.
     *
     * @callname: GenesisBuilder_get_preset
     * @param {string | undefined} id
     **/
    getPreset: GenericRuntimeApiMethod<
      Rv,
      (id?: string | undefined) => Promise<Bytes | undefined>
    >;

    /**
     * Returns a list of identifiers for available builtin `RuntimeGenesisConfig` presets.
     *
     * The presets from the list can be queried with [`GenesisBuilder::get_preset`] method. If
     * no named presets are provided by the runtime the list is empty.
     *
     * @callname: GenesisBuilder_preset_names
     **/
    presetNames: GenericRuntimeApiMethod<Rv, () => Promise<Array<string>>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: TaggedTransactionQueue - 0xd2bc9897eed08f15
   **/
  taggedTransactionQueue: {
    /**
     * Validate the transaction.
     *
     * This method is invoked by the transaction pool to learn details about given transaction.
     * The implementation should make sure to verify the correctness of the transaction
     * against current state. The given `block_hash` corresponds to the hash of the block
     * that is used as current state.
     *
     * Note that this call may be performed by the pool multiple times and transactions
     * might be verified in any possible order.
     *
     * @callname: TaggedTransactionQueue_validate_transaction
     * @param {SpRuntimeTransactionValidityTransactionSource} source
     * @param {FpSelfContainedUncheckedExtrinsic} tx
     * @param {H256} block_hash
     **/
    validateTransaction: GenericRuntimeApiMethod<
      Rv,
      (
        source: SpRuntimeTransactionValidityTransactionSource,
        tx: FpSelfContainedUncheckedExtrinsic,
        blockHash: H256,
      ) => Promise<
        Result<
          SpRuntimeTransactionValidityValidTransaction,
          SpRuntimeTransactionValidityTransactionValidityError
        >
      >
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: OffchainWorkerApi - 0xf78b278be53f454c
   **/
  offchainWorkerApi: {
    /**
     * Starts the off-chain task for given block header.
     *
     * @callname: OffchainWorkerApi_offchain_worker
     * @param {Header} header
     **/
    offchainWorker: GenericRuntimeApiMethod<
      Rv,
      (header: Header) => Promise<[]>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: AuraApi - 0xdd718d5cc53262d4
   **/
  auraApi: {
    /**
     * Returns the slot duration for Aura.
     *
     * Currently, only the value provided by this type at genesis will be used.
     *
     * @callname: AuraApi_slot_duration
     **/
    slotDuration: GenericRuntimeApiMethod<
      Rv,
      () => Promise<SpConsensusSlotsSlotDuration>
    >;

    /**
     * Return the current set of authorities.
     *
     * @callname: AuraApi_authorities
     **/
    authorities: GenericRuntimeApiMethod<
      Rv,
      () => Promise<Array<SpConsensusAuraSr25519AppSr25519Public>>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: SessionKeys - 0xab3c0572291feb8b
   **/
  sessionKeys: {
    /**
     * Generate a set of session keys with optionally using the given seed.
     * The keys should be stored within the keystore exposed via runtime
     * externalities.
     *
     * The seed needs to be a valid `utf8` string.
     *
     * Returns the concatenated SCALE encoded public keys.
     *
     * @callname: SessionKeys_generate_session_keys
     * @param {BytesLike | undefined} seed
     **/
    generateSessionKeys: GenericRuntimeApiMethod<
      Rv,
      (seed?: BytesLike | undefined) => Promise<Bytes>
    >;

    /**
     * Decode the given public session keys.
     *
     * Returns the list of public raw public keys + key type.
     *
     * @callname: SessionKeys_decode_session_keys
     * @param {BytesLike} encoded
     **/
    decodeSessionKeys: GenericRuntimeApiMethod<
      Rv,
      (
        encoded: BytesLike,
      ) => Promise<Array<[Bytes, SpCoreCryptoKeyTypeId]> | undefined>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: GrandpaApi - 0xed99c5acb25eedf5
   **/
  grandpaApi: {
    /**
     * Get the current GRANDPA authorities and weights. This should not change except
     * for when changes are scheduled and the corresponding delay has passed.
     *
     * When called at block B, it will return the set of authorities that should be
     * used to finalize descendants of this block (B+1, B+2, ...). The block B itself
     * is finalized by the authorities from block B-1.
     *
     * @callname: GrandpaApi_grandpa_authorities
     **/
    grandpaAuthorities: GenericRuntimeApiMethod<
      Rv,
      () => Promise<Array<[SpConsensusGrandpaAppPublic, bigint]>>
    >;

    /**
     * Submits an unsigned extrinsic to report an equivocation. The caller
     * must provide the equivocation proof and a key ownership proof
     * (should be obtained using `generate_key_ownership_proof`). The
     * extrinsic will be unsigned and should only be accepted for local
     * authorship (not to be broadcast to the network). This method returns
     * `None` when creation of the extrinsic fails, e.g. if equivocation
     * reporting is disabled for the given runtime (i.e. this method is
     * hardcoded to return `None`). Only useful in an offchain context.
     *
     * @callname: GrandpaApi_submit_report_equivocation_unsigned_extrinsic
     * @param {SpConsensusGrandpaEquivocationProof} equivocation_proof
     * @param {SpRuntimeOpaqueValue} key_owner_proof
     **/
    submitReportEquivocationUnsignedExtrinsic: GenericRuntimeApiMethod<
      Rv,
      (
        equivocationProof: SpConsensusGrandpaEquivocationProof,
        keyOwnerProof: SpRuntimeOpaqueValue,
      ) => Promise<[] | undefined>
    >;

    /**
     * Generates a proof of key ownership for the given authority in the
     * given set. An example usage of this module is coupled with the
     * session historical module to prove that a given authority key is
     * tied to a given staking identity during a specific session. Proofs
     * of key ownership are necessary for submitting equivocation reports.
     * NOTE: even though the API takes a `set_id` as parameter the current
     * implementations ignore this parameter and instead rely on this
     * method being called at the correct block height, i.e. any point at
     * which the given set id is live on-chain. Future implementations will
     * instead use indexed data through an offchain worker, not requiring
     * older states to be available.
     *
     * @callname: GrandpaApi_generate_key_ownership_proof
     * @param {bigint} set_id
     * @param {SpConsensusGrandpaAppPublic} authority_id
     **/
    generateKeyOwnershipProof: GenericRuntimeApiMethod<
      Rv,
      (
        setId: bigint,
        authorityId: SpConsensusGrandpaAppPublic,
      ) => Promise<SpRuntimeOpaqueValue | undefined>
    >;

    /**
     * Get current GRANDPA authority set id.
     *
     * @callname: GrandpaApi_current_set_id
     **/
    currentSetId: GenericRuntimeApiMethod<Rv, () => Promise<bigint>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: AccountNonceApi - 0xbc9d89904f5b923f
   **/
  accountNonceApi: {
    /**
     * Get current account nonce of given `AccountId`.
     *
     * @callname: AccountNonceApi_account_nonce
     * @param {AccountId32Like} account
     **/
    accountNonce: GenericRuntimeApiMethod<
      Rv,
      (account: AccountId32Like) => Promise<number>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: TransactionPaymentApi - 0x37c8bb1350a9a2a8
   **/
  transactionPaymentApi: {
    /**
     *
     * @callname: TransactionPaymentApi_query_info
     * @param {FpSelfContainedUncheckedExtrinsic} uxt
     * @param {number} len
     **/
    queryInfo: GenericRuntimeApiMethod<
      Rv,
      (
        uxt: FpSelfContainedUncheckedExtrinsic,
        len: number,
      ) => Promise<PalletTransactionPaymentRuntimeDispatchInfo>
    >;

    /**
     *
     * @callname: TransactionPaymentApi_query_fee_details
     * @param {FpSelfContainedUncheckedExtrinsic} uxt
     * @param {number} len
     **/
    queryFeeDetails: GenericRuntimeApiMethod<
      Rv,
      (
        uxt: FpSelfContainedUncheckedExtrinsic,
        len: number,
      ) => Promise<PalletTransactionPaymentFeeDetails>
    >;

    /**
     *
     * @callname: TransactionPaymentApi_query_weight_to_fee
     * @param {SpWeightsWeightV2Weight} weight
     **/
    queryWeightToFee: GenericRuntimeApiMethod<
      Rv,
      (weight: SpWeightsWeightV2Weight) => Promise<bigint>
    >;

    /**
     *
     * @callname: TransactionPaymentApi_query_length_to_fee
     * @param {number} length
     **/
    queryLengthToFee: GenericRuntimeApiMethod<
      Rv,
      (length: number) => Promise<bigint>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: TransactionPaymentCallApi - 0xf3ff14d5ab527059
   **/
  transactionPaymentCallApi: {
    /**
     * Query information of a dispatch class, weight, and fee of a given encoded `Call`.
     *
     * @callname: TransactionPaymentCallApi_query_call_info
     * @param {NodeSubtensorRuntimeRuntimeCallLike} call
     * @param {number} len
     **/
    queryCallInfo: GenericRuntimeApiMethod<
      Rv,
      (
        call: NodeSubtensorRuntimeRuntimeCallLike,
        len: number,
      ) => Promise<PalletTransactionPaymentRuntimeDispatchInfo>
    >;

    /**
     * Query fee details of a given encoded `Call`.
     *
     * @callname: TransactionPaymentCallApi_query_call_fee_details
     * @param {NodeSubtensorRuntimeRuntimeCallLike} call
     * @param {number} len
     **/
    queryCallFeeDetails: GenericRuntimeApiMethod<
      Rv,
      (
        call: NodeSubtensorRuntimeRuntimeCallLike,
        len: number,
      ) => Promise<PalletTransactionPaymentFeeDetails>
    >;

    /**
     * Query the output of the current `WeightToFee` given some input.
     *
     * @callname: TransactionPaymentCallApi_query_weight_to_fee
     * @param {SpWeightsWeightV2Weight} weight
     **/
    queryWeightToFee: GenericRuntimeApiMethod<
      Rv,
      (weight: SpWeightsWeightV2Weight) => Promise<bigint>
    >;

    /**
     * Query the output of the current `LengthToFee` given some input.
     *
     * @callname: TransactionPaymentCallApi_query_length_to_fee
     * @param {number} length
     **/
    queryLengthToFee: GenericRuntimeApiMethod<
      Rv,
      (length: number) => Promise<bigint>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: EthereumRuntimeRPCApi - 0x582211f65bb14b89
   **/
  ethereumRuntimeRPCApi: {
    /**
     * Returns runtime defined pallet_evm::ChainId.
     *
     * @callname: EthereumRuntimeRPCApi_chain_id
     **/
    chainId: GenericRuntimeApiMethod<Rv, () => Promise<bigint>>;

    /**
     * Returns pallet_evm::Accounts by address.
     *
     * @callname: EthereumRuntimeRPCApi_account_basic
     * @param {H160} address
     **/
    accountBasic: GenericRuntimeApiMethod<
      Rv,
      (address: H160) => Promise<EvmBackendBasic>
    >;

    /**
     * Returns FixedGasPrice::min_gas_price
     *
     * @callname: EthereumRuntimeRPCApi_gas_price
     **/
    gasPrice: GenericRuntimeApiMethod<Rv, () => Promise<U256>>;

    /**
     * For a given account address, returns pallet_evm::AccountCodes.
     *
     * @callname: EthereumRuntimeRPCApi_account_code_at
     * @param {H160} address
     **/
    accountCodeAt: GenericRuntimeApiMethod<
      Rv,
      (address: H160) => Promise<Bytes>
    >;

    /**
     * Returns the converted FindAuthor::find_author authority id.
     *
     * @callname: EthereumRuntimeRPCApi_author
     **/
    author: GenericRuntimeApiMethod<Rv, () => Promise<H160>>;

    /**
     * For a given account address and index, returns pallet_evm::AccountStorages.
     *
     * @callname: EthereumRuntimeRPCApi_storage_at
     * @param {H160} address
     * @param {U256} index
     **/
    storageAt: GenericRuntimeApiMethod<
      Rv,
      (address: H160, index: U256) => Promise<H256>
    >;

    /**
     *
     * @callname: EthereumRuntimeRPCApi_call
     * @param {H160} from
     * @param {H160} to
     * @param {BytesLike} data
     * @param {U256} value
     * @param {U256} gas_limit
     * @param {U256 | undefined} max_fee_per_gas
     * @param {U256 | undefined} max_priority_fee_per_gas
     * @param {U256 | undefined} nonce
     * @param {boolean} estimate
     * @param {Array<[H160, Array<H256>]> | undefined} access_list
     **/
    call: GenericRuntimeApiMethod<
      Rv,
      (
        from: H160,
        to: H160,
        data: BytesLike,
        value: U256,
        gasLimit: U256,
        maxFeePerGas: U256 | undefined,
        maxPriorityFeePerGas: U256 | undefined,
        nonce: U256 | undefined,
        estimate: boolean,
        accessList?: Array<[H160, Array<H256>]> | undefined,
      ) => Promise<Result<FpEvmExecutionInfoV2, DispatchError>>
    >;

    /**
     *
     * @callname: EthereumRuntimeRPCApi_create
     * @param {H160} from
     * @param {BytesLike} data
     * @param {U256} value
     * @param {U256} gas_limit
     * @param {U256 | undefined} max_fee_per_gas
     * @param {U256 | undefined} max_priority_fee_per_gas
     * @param {U256 | undefined} nonce
     * @param {boolean} estimate
     * @param {Array<[H160, Array<H256>]> | undefined} access_list
     **/
    create: GenericRuntimeApiMethod<
      Rv,
      (
        from: H160,
        data: BytesLike,
        value: U256,
        gasLimit: U256,
        maxFeePerGas: U256 | undefined,
        maxPriorityFeePerGas: U256 | undefined,
        nonce: U256 | undefined,
        estimate: boolean,
        accessList?: Array<[H160, Array<H256>]> | undefined,
      ) => Promise<Result<FpEvmExecutionInfoV2H160, DispatchError>>
    >;

    /**
     * Return the current block.
     *
     * @callname: EthereumRuntimeRPCApi_current_block
     **/
    currentBlock: GenericRuntimeApiMethod<
      Rv,
      () => Promise<EthereumBlock | undefined>
    >;

    /**
     * Return the current receipt.
     *
     * @callname: EthereumRuntimeRPCApi_current_receipts
     **/
    currentReceipts: GenericRuntimeApiMethod<
      Rv,
      () => Promise<Array<EthereumReceiptReceiptV3> | undefined>
    >;

    /**
     * Return the current transaction status.
     *
     * @callname: EthereumRuntimeRPCApi_current_transaction_statuses
     **/
    currentTransactionStatuses: GenericRuntimeApiMethod<
      Rv,
      () => Promise<Array<FpRpcTransactionStatus> | undefined>
    >;

    /**
     *
     * @callname: EthereumRuntimeRPCApi_current_all
     **/
    currentAll: GenericRuntimeApiMethod<
      Rv,
      () => Promise<
        [
          EthereumBlock | undefined,
          Array<EthereumReceiptReceiptV3> | undefined,
          Array<FpRpcTransactionStatus> | undefined,
        ]
      >
    >;

    /**
     * Receives a `Vec<OpaqueExtrinsic>` and filters all the ethereum transactions.
     *
     * @callname: EthereumRuntimeRPCApi_extrinsic_filter
     * @param {Array<FpSelfContainedUncheckedExtrinsic>} xts
     **/
    extrinsicFilter: GenericRuntimeApiMethod<
      Rv,
      (
        xts: Array<FpSelfContainedUncheckedExtrinsic>,
      ) => Promise<Array<EthereumTransactionTransactionV2>>
    >;

    /**
     * Return the elasticity multiplier.
     *
     * @callname: EthereumRuntimeRPCApi_elasticity
     **/
    elasticity: GenericRuntimeApiMethod<Rv, () => Promise<Permill | undefined>>;

    /**
     * Used to determine if gas limit multiplier for non-transactional calls (eth_call/estimateGas)
     * is supported.
     *
     * @callname: EthereumRuntimeRPCApi_gas_limit_multiplier_support
     **/
    gasLimitMultiplierSupport: GenericRuntimeApiMethod<Rv, () => Promise<[]>>;

    /**
     * Return the pending block.
     *
     * @callname: EthereumRuntimeRPCApi_pending_block
     * @param {Array<FpSelfContainedUncheckedExtrinsic>} xts
     **/
    pendingBlock: GenericRuntimeApiMethod<
      Rv,
      (
        xts: Array<FpSelfContainedUncheckedExtrinsic>,
      ) => Promise<
        [EthereumBlock | undefined, Array<FpRpcTransactionStatus> | undefined]
      >
    >;

    /**
     * Initialize the pending block.
     * The behavior should be the same as the runtime api Core_initialize_block but
     * for a "pending" block.
     * If your project don't need to have a different behavior to initialize "pending" blocks,
     * you can copy your Core_initialize_block implementation.
     *
     * @callname: EthereumRuntimeRPCApi_initialize_pending_block
     * @param {Header} header
     **/
    initializePendingBlock: GenericRuntimeApiMethod<
      Rv,
      (header: Header) => Promise<[]>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: ConvertTransactionRuntimeApi - 0xe65b00e46cedd0aa
   **/
  convertTransactionRuntimeApi: {
    /**
     *
     * @callname: ConvertTransactionRuntimeApi_convert_transaction
     * @param {EthereumTransactionTransactionV2} transaction
     **/
    convertTransaction: GenericRuntimeApiMethod<
      Rv,
      (
        transaction: EthereumTransactionTransactionV2,
      ) => Promise<FpSelfContainedUncheckedExtrinsic>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: DelegateInfoRuntimeApi - 0x42e62be4a39e5b60
   **/
  delegateInfoRuntimeApi: {
    /**
     *
     * @callname: DelegateInfoRuntimeApi_get_delegates
     **/
    getDelegates: GenericRuntimeApiMethod<
      Rv,
      () => Promise<Array<PalletSubtensorRpcInfoDelegateInfo>>
    >;

    /**
     *
     * @callname: DelegateInfoRuntimeApi_get_delegate
     * @param {AccountId32Like} delegate_account
     **/
    getDelegate: GenericRuntimeApiMethod<
      Rv,
      (
        delegateAccount: AccountId32Like,
      ) => Promise<PalletSubtensorRpcInfoDelegateInfo | undefined>
    >;

    /**
     *
     * @callname: DelegateInfoRuntimeApi_get_delegated
     * @param {AccountId32Like} delegatee_account
     **/
    getDelegated: GenericRuntimeApiMethod<
      Rv,
      (
        delegateeAccount: AccountId32Like,
      ) => Promise<
        Array<[PalletSubtensorRpcInfoDelegateInfo, [number, bigint]]>
      >
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: NeuronInfoRuntimeApi - 0x806df4ccaa9ed485
   **/
  neuronInfoRuntimeApi: {
    /**
     *
     * @callname: NeuronInfoRuntimeApi_get_neurons
     * @param {number} netuid
     **/
    getNeurons: GenericRuntimeApiMethod<
      Rv,
      (netuid: number) => Promise<Array<PalletSubtensorRpcInfoNeuronInfo>>
    >;

    /**
     *
     * @callname: NeuronInfoRuntimeApi_get_neuron
     * @param {number} netuid
     * @param {number} uid
     **/
    getNeuron: GenericRuntimeApiMethod<
      Rv,
      (
        netuid: number,
        uid: number,
      ) => Promise<PalletSubtensorRpcInfoNeuronInfo | undefined>
    >;

    /**
     *
     * @callname: NeuronInfoRuntimeApi_get_neurons_lite
     * @param {number} netuid
     **/
    getNeuronsLite: GenericRuntimeApiMethod<
      Rv,
      (
        netuid: number,
      ) => Promise<Array<PalletSubtensorRpcInfoNeuronInfoNeuronInfoLite>>
    >;

    /**
     *
     * @callname: NeuronInfoRuntimeApi_get_neuron_lite
     * @param {number} netuid
     * @param {number} uid
     **/
    getNeuronLite: GenericRuntimeApiMethod<
      Rv,
      (
        netuid: number,
        uid: number,
      ) => Promise<PalletSubtensorRpcInfoNeuronInfoNeuronInfoLite | undefined>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: SubnetInfoRuntimeApi - 0x8375104b299b74c5
   **/
  subnetInfoRuntimeApi: {
    /**
     *
     * @callname: SubnetInfoRuntimeApi_get_subnet_info
     * @param {number} netuid
     **/
    getSubnetInfo: GenericRuntimeApiMethod<
      Rv,
      (netuid: number) => Promise<PalletSubtensorRpcInfoSubnetInfo | undefined>
    >;

    /**
     *
     * @callname: SubnetInfoRuntimeApi_get_subnets_info
     **/
    getSubnetsInfo: GenericRuntimeApiMethod<
      Rv,
      () => Promise<Array<PalletSubtensorRpcInfoSubnetInfo | undefined>>
    >;

    /**
     *
     * @callname: SubnetInfoRuntimeApi_get_subnet_info_v2
     * @param {number} netuid
     **/
    getSubnetInfoV2: GenericRuntimeApiMethod<
      Rv,
      (
        netuid: number,
      ) => Promise<PalletSubtensorRpcInfoSubnetInfoSubnetInfov2 | undefined>
    >;

    /**
     *
     * @callname: SubnetInfoRuntimeApi_get_subnets_info_v2
     **/
    getSubnetsInfoV2: GenericRuntimeApiMethod<
      Rv,
      () => Promise<
        Array<PalletSubtensorRpcInfoSubnetInfoSubnetInfov2 | undefined>
      >
    >;

    /**
     *
     * @callname: SubnetInfoRuntimeApi_get_subnet_hyperparams
     * @param {number} netuid
     **/
    getSubnetHyperparams: GenericRuntimeApiMethod<
      Rv,
      (
        netuid: number,
      ) => Promise<
        PalletSubtensorRpcInfoSubnetInfoSubnetHyperparams | undefined
      >
    >;

    /**
     *
     * @callname: SubnetInfoRuntimeApi_get_all_dynamic_info
     **/
    getAllDynamicInfo: GenericRuntimeApiMethod<
      Rv,
      () => Promise<Array<PalletSubtensorRpcInfoDynamicInfo | undefined>>
    >;

    /**
     *
     * @callname: SubnetInfoRuntimeApi_get_all_metagraphs
     **/
    getAllMetagraphs: GenericRuntimeApiMethod<
      Rv,
      () => Promise<Array<PalletSubtensorRpcInfoMetagraph | undefined>>
    >;

    /**
     *
     * @callname: SubnetInfoRuntimeApi_get_metagraph
     * @param {number} netuid
     **/
    getMetagraph: GenericRuntimeApiMethod<
      Rv,
      (netuid: number) => Promise<PalletSubtensorRpcInfoMetagraph | undefined>
    >;

    /**
     *
     * @callname: SubnetInfoRuntimeApi_get_dynamic_info
     * @param {number} netuid
     **/
    getDynamicInfo: GenericRuntimeApiMethod<
      Rv,
      (netuid: number) => Promise<PalletSubtensorRpcInfoDynamicInfo | undefined>
    >;

    /**
     *
     * @callname: SubnetInfoRuntimeApi_get_subnet_state
     * @param {number} netuid
     **/
    getSubnetState: GenericRuntimeApiMethod<
      Rv,
      (
        netuid: number,
      ) => Promise<PalletSubtensorRpcInfoShowSubnetSubnetState | undefined>
    >;

    /**
     *
     * @callname: SubnetInfoRuntimeApi_get_selective_metagraph
     * @param {number} netuid
     * @param {Array<number>} metagraph_indexes
     **/
    getSelectiveMetagraph: GenericRuntimeApiMethod<
      Rv,
      (
        netuid: number,
        metagraphIndexes: Array<number>,
      ) => Promise<
        PalletSubtensorRpcInfoMetagraphSelectiveMetagraph | undefined
      >
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: StakeInfoRuntimeApi - 0x5d1fbfbe852f2807
   **/
  stakeInfoRuntimeApi: {
    /**
     *
     * @callname: StakeInfoRuntimeApi_get_stake_info_for_coldkey
     * @param {AccountId32Like} coldkey_account
     **/
    getStakeInfoForColdkey: GenericRuntimeApiMethod<
      Rv,
      (
        coldkeyAccount: AccountId32Like,
      ) => Promise<Array<PalletSubtensorRpcInfoStakeInfo>>
    >;

    /**
     *
     * @callname: StakeInfoRuntimeApi_get_stake_info_for_coldkeys
     * @param {Array<AccountId32Like>} coldkey_accounts
     **/
    getStakeInfoForColdkeys: GenericRuntimeApiMethod<
      Rv,
      (
        coldkeyAccounts: Array<AccountId32Like>,
      ) => Promise<Array<[AccountId32, Array<PalletSubtensorRpcInfoStakeInfo>]>>
    >;

    /**
     *
     * @callname: StakeInfoRuntimeApi_get_stake_info_for_hotkey_coldkey_netuid
     * @param {AccountId32Like} hotkey_account
     * @param {AccountId32Like} coldkey_account
     * @param {number} netuid
     **/
    getStakeInfoForHotkeyColdkeyNetuid: GenericRuntimeApiMethod<
      Rv,
      (
        hotkeyAccount: AccountId32Like,
        coldkeyAccount: AccountId32Like,
        netuid: number,
      ) => Promise<PalletSubtensorRpcInfoStakeInfo | undefined>
    >;

    /**
     *
     * @callname: StakeInfoRuntimeApi_get_stake_fee
     * @param {[AccountId32Like, number] | undefined} origin
     * @param {AccountId32Like} origin_coldkey_account
     * @param {[AccountId32Like, number] | undefined} destination
     * @param {AccountId32Like} destination_coldkey_account
     * @param {bigint} amount
     **/
    getStakeFee: GenericRuntimeApiMethod<
      Rv,
      (
        origin: [AccountId32Like, number] | undefined,
        originColdkeyAccount: AccountId32Like,
        destination: [AccountId32Like, number] | undefined,
        destinationColdkeyAccount: AccountId32Like,
        amount: bigint,
      ) => Promise<bigint>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: SubnetRegistrationRuntimeApi - 0xc6886e2f8e598b0a
   **/
  subnetRegistrationRuntimeApi: {
    /**
     *
     * @callname: SubnetRegistrationRuntimeApi_get_network_registration_cost
     **/
    getNetworkRegistrationCost: GenericRuntimeApiMethod<
      Rv,
      () => Promise<bigint>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
}
