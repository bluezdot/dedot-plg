// Generated by dedot cli

import type {
  GenericChainEvents,
  GenericPalletEvent,
  RpcVersion,
} from "dedot/types";
import type {
  DispatchInfo,
  DispatchError,
  AccountId32,
  H256,
  Result,
  H160,
  FixedBytes,
  Bytes,
  U256,
  Permill,
} from "dedot/codecs";
import type {
  SpConsensusGrandpaAppPublic,
  FrameSupportTokensMiscBalanceStatus,
  PalletMultisigTimepoint,
  SubtensorRuntimeCommonProxyType,
  PalletAdminUtilsPrecompileEnum,
  PalletSafeModeExitReason,
  EvmCoreErrorExitReason,
  EthereumLog,
} from "./types";

export interface ChainEvents<Rv extends RpcVersion>
  extends GenericChainEvents<Rv> {
  /**
   * Pallet `System`'s events
   **/
  system: {
    /**
     * An extrinsic completed successfully.
     **/
    ExtrinsicSuccess: GenericPalletEvent<
      Rv,
      "System",
      "ExtrinsicSuccess",
      { dispatchInfo: DispatchInfo }
    >;

    /**
     * An extrinsic failed.
     **/
    ExtrinsicFailed: GenericPalletEvent<
      Rv,
      "System",
      "ExtrinsicFailed",
      { dispatchError: DispatchError; dispatchInfo: DispatchInfo }
    >;

    /**
     * `:code` was updated.
     **/
    CodeUpdated: GenericPalletEvent<Rv, "System", "CodeUpdated", null>;

    /**
     * A new account was created.
     **/
    NewAccount: GenericPalletEvent<
      Rv,
      "System",
      "NewAccount",
      { account: AccountId32 }
    >;

    /**
     * An account was reaped.
     **/
    KilledAccount: GenericPalletEvent<
      Rv,
      "System",
      "KilledAccount",
      { account: AccountId32 }
    >;

    /**
     * On on-chain remark happened.
     **/
    Remarked: GenericPalletEvent<
      Rv,
      "System",
      "Remarked",
      { sender: AccountId32; hash: H256 }
    >;

    /**
     * An upgrade was authorized.
     **/
    UpgradeAuthorized: GenericPalletEvent<
      Rv,
      "System",
      "UpgradeAuthorized",
      { codeHash: H256; checkVersion: boolean }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Grandpa`'s events
   **/
  grandpa: {
    /**
     * New authority set has been applied.
     **/
    NewAuthorities: GenericPalletEvent<
      Rv,
      "Grandpa",
      "NewAuthorities",
      { authoritySet: Array<[SpConsensusGrandpaAppPublic, bigint]> }
    >;

    /**
     * Current authority set has been paused.
     **/
    Paused: GenericPalletEvent<Rv, "Grandpa", "Paused", null>;

    /**
     * Current authority set has been resumed.
     **/
    Resumed: GenericPalletEvent<Rv, "Grandpa", "Resumed", null>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Balances`'s events
   **/
  balances: {
    /**
     * An account was created with some free balance.
     **/
    Endowed: GenericPalletEvent<
      Rv,
      "Balances",
      "Endowed",
      { account: AccountId32; freeBalance: bigint }
    >;

    /**
     * An account was removed whose balance was non-zero but below ExistentialDeposit,
     * resulting in an outright loss.
     **/
    DustLost: GenericPalletEvent<
      Rv,
      "Balances",
      "DustLost",
      { account: AccountId32; amount: bigint }
    >;

    /**
     * Transfer succeeded.
     **/
    Transfer: GenericPalletEvent<
      Rv,
      "Balances",
      "Transfer",
      { from: AccountId32; to: AccountId32; amount: bigint }
    >;

    /**
     * A balance was set by root.
     **/
    BalanceSet: GenericPalletEvent<
      Rv,
      "Balances",
      "BalanceSet",
      { who: AccountId32; free: bigint }
    >;

    /**
     * Some balance was reserved (moved from free to reserved).
     **/
    Reserved: GenericPalletEvent<
      Rv,
      "Balances",
      "Reserved",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some balance was unreserved (moved from reserved to free).
     **/
    Unreserved: GenericPalletEvent<
      Rv,
      "Balances",
      "Unreserved",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some balance was moved from the reserve of the first account to the second account.
     * Final argument indicates the destination balance type.
     **/
    ReserveRepatriated: GenericPalletEvent<
      Rv,
      "Balances",
      "ReserveRepatriated",
      {
        from: AccountId32;
        to: AccountId32;
        amount: bigint;
        destinationStatus: FrameSupportTokensMiscBalanceStatus;
      }
    >;

    /**
     * Some amount was deposited (e.g. for transaction fees).
     **/
    Deposit: GenericPalletEvent<
      Rv,
      "Balances",
      "Deposit",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some amount was withdrawn from the account (e.g. for transaction fees).
     **/
    Withdraw: GenericPalletEvent<
      Rv,
      "Balances",
      "Withdraw",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some amount was removed from the account (e.g. for misbehavior).
     **/
    Slashed: GenericPalletEvent<
      Rv,
      "Balances",
      "Slashed",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some amount was minted into an account.
     **/
    Minted: GenericPalletEvent<
      Rv,
      "Balances",
      "Minted",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some amount was burned from an account.
     **/
    Burned: GenericPalletEvent<
      Rv,
      "Balances",
      "Burned",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some amount was suspended from an account (it can be restored later).
     **/
    Suspended: GenericPalletEvent<
      Rv,
      "Balances",
      "Suspended",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some amount was restored into an account.
     **/
    Restored: GenericPalletEvent<
      Rv,
      "Balances",
      "Restored",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * An account was upgraded.
     **/
    Upgraded: GenericPalletEvent<
      Rv,
      "Balances",
      "Upgraded",
      { who: AccountId32 }
    >;

    /**
     * Total issuance was increased by `amount`, creating a credit to be balanced.
     **/
    Issued: GenericPalletEvent<Rv, "Balances", "Issued", { amount: bigint }>;

    /**
     * Total issuance was decreased by `amount`, creating a debt to be balanced.
     **/
    Rescinded: GenericPalletEvent<
      Rv,
      "Balances",
      "Rescinded",
      { amount: bigint }
    >;

    /**
     * Some balance was locked.
     **/
    Locked: GenericPalletEvent<
      Rv,
      "Balances",
      "Locked",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some balance was unlocked.
     **/
    Unlocked: GenericPalletEvent<
      Rv,
      "Balances",
      "Unlocked",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some balance was frozen.
     **/
    Frozen: GenericPalletEvent<
      Rv,
      "Balances",
      "Frozen",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some balance was thawed.
     **/
    Thawed: GenericPalletEvent<
      Rv,
      "Balances",
      "Thawed",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * The `TotalIssuance` was forcefully changed.
     **/
    TotalIssuanceForced: GenericPalletEvent<
      Rv,
      "Balances",
      "TotalIssuanceForced",
      { old: bigint; new: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `TransactionPayment`'s events
   **/
  transactionPayment: {
    /**
     * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
     * has been paid by `who`.
     **/
    TransactionFeePaid: GenericPalletEvent<
      Rv,
      "TransactionPayment",
      "TransactionFeePaid",
      { who: AccountId32; actualFee: bigint; tip: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `SubtensorModule`'s events
   **/
  subtensorModule: {
    /**
     * a new network is added.
     **/
    NetworkAdded: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "NetworkAdded",
      [number, number]
    >;

    /**
     * a network is removed.
     **/
    NetworkRemoved: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "NetworkRemoved",
      number
    >;

    /**
     * stake has been transferred from the a coldkey account onto the hotkey staking account.
     **/
    StakeAdded: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "StakeAdded",
      [AccountId32, AccountId32, bigint, bigint, number, bigint]
    >;

    /**
     * stake has been removed from the hotkey staking account onto the coldkey account.
     **/
    StakeRemoved: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "StakeRemoved",
      [AccountId32, AccountId32, bigint, bigint, number, bigint]
    >;

    /**
     * stake has been transferred from the coldkey account onto the hotkey staking account (at the end of the block)
     **/
    AggregatedStakeAdded: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "AggregatedStakeAdded",
      [AccountId32, AccountId32, number, bigint]
    >;

    /**
     * adding aggregated stake has failed
     **/
    FailedToAddAggregatedStake: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "FailedToAddAggregatedStake",
      [AccountId32, AccountId32, number, bigint]
    >;

    /**
     * limited stake has been transferred from the coldkey account onto the hotkey staking account (at the end of the block)
     **/
    AggregatedLimitedStakeAdded: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "AggregatedLimitedStakeAdded",
      [AccountId32, AccountId32, number, bigint, bigint, boolean]
    >;

    /**
     * adding limited aggregated stake has failed
     **/
    FailedToAddAggregatedLimitedStake: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "FailedToAddAggregatedLimitedStake",
      [AccountId32, AccountId32, number, bigint, bigint, boolean]
    >;

    /**
     * stake has been removed from the hotkey staking account into the coldkey account (at the end of the block).
     **/
    AggregatedStakeRemoved: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "AggregatedStakeRemoved",
      [AccountId32, AccountId32, number, bigint]
    >;

    /**
     * removing aggregated stake has failed
     **/
    FailedToRemoveAggregatedStake: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "FailedToRemoveAggregatedStake",
      [AccountId32, AccountId32, number, bigint]
    >;

    /**
     * aggregated limited stake has been removed from the hotkey staking account into the coldkey account (at the end of the block).
     **/
    AggregatedLimitedStakeRemoved: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "AggregatedLimitedStakeRemoved",
      [AccountId32, AccountId32, number, bigint, bigint, boolean]
    >;

    /**
     * removing limited aggregated stake has failed
     **/
    FailedToRemoveAggregatedLimitedStake: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "FailedToRemoveAggregatedLimitedStake",
      [AccountId32, AccountId32, number, bigint, bigint, boolean]
    >;

    /**
     * aggregated unstake_all operation has succeeded
     **/
    AggregatedUnstakeAllSucceeded: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "AggregatedUnstakeAllSucceeded",
      [AccountId32, AccountId32]
    >;

    /**
     * aggregated unstake_all operation has failed
     **/
    AggregatedUnstakeAllFailed: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "AggregatedUnstakeAllFailed",
      [AccountId32, AccountId32]
    >;

    /**
     * aggregated unstake_all_alpha operation has succeeded
     **/
    AggregatedUnstakeAllAlphaSucceeded: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "AggregatedUnstakeAllAlphaSucceeded",
      [AccountId32, AccountId32]
    >;

    /**
     * aggregated unstake_all_alpha operation has failed
     **/
    AggregatedUnstakeAllAlphaFailed: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "AggregatedUnstakeAllAlphaFailed",
      [AccountId32, AccountId32]
    >;

    /**
     * stake has been moved from origin (hotkey, subnet ID) to destination (hotkey, subnet ID) of this amount (in TAO).
     **/
    StakeMoved: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "StakeMoved",
      [AccountId32, AccountId32, number, AccountId32, number, bigint]
    >;

    /**
     * a caller successfully sets their weights on a subnetwork.
     **/
    WeightsSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "WeightsSet",
      [number, number]
    >;

    /**
     * a new neuron account has been registered to the chain.
     **/
    NeuronRegistered: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "NeuronRegistered",
      [number, number, AccountId32]
    >;

    /**
     * multiple uids have been concurrently registered.
     **/
    BulkNeuronsRegistered: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "BulkNeuronsRegistered",
      [number, number]
    >;

    /**
     * FIXME: Not used yet
     **/
    BulkBalancesSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "BulkBalancesSet",
      [number, number]
    >;

    /**
     * max allowed uids has been set for a subnetwork.
     **/
    MaxAllowedUidsSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "MaxAllowedUidsSet",
      [number, number]
    >;

    /**
     * the max weight limit has been set for a subnetwork.
     **/
    MaxWeightLimitSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "MaxWeightLimitSet",
      [number, number]
    >;

    /**
     * the difficulty has been set for a subnet.
     **/
    DifficultySet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "DifficultySet",
      [number, bigint]
    >;

    /**
     * the adjustment interval is set for a subnet.
     **/
    AdjustmentIntervalSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "AdjustmentIntervalSet",
      [number, number]
    >;

    /**
     * registration per interval is set for a subnet.
     **/
    RegistrationPerIntervalSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "RegistrationPerIntervalSet",
      [number, number]
    >;

    /**
     * we set max registrations per block.
     **/
    MaxRegistrationsPerBlockSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "MaxRegistrationsPerBlockSet",
      [number, number]
    >;

    /**
     * an activity cutoff is set for a subnet.
     **/
    ActivityCutoffSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "ActivityCutoffSet",
      [number, number]
    >;

    /**
     * Rho value is set.
     **/
    RhoSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "RhoSet",
      [number, number]
    >;

    /**
     * steepness of the sigmoid used to compute alpha values.
     **/
    AlphaSigmoidSteepnessSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "AlphaSigmoidSteepnessSet",
      [number, number]
    >;

    /**
     * Kappa is set for a subnet.
     **/
    KappaSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "KappaSet",
      [number, number]
    >;

    /**
     * minimum allowed weight is set for a subnet.
     **/
    MinAllowedWeightSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "MinAllowedWeightSet",
      [number, number]
    >;

    /**
     * the validator pruning length has been set.
     **/
    ValidatorPruneLenSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "ValidatorPruneLenSet",
      [number, bigint]
    >;

    /**
     * the scaling law power has been set for a subnet.
     **/
    ScalingLawPowerSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "ScalingLawPowerSet",
      [number, number]
    >;

    /**
     * weights set rate limit has been set for a subnet.
     **/
    WeightsSetRateLimitSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "WeightsSetRateLimitSet",
      [number, bigint]
    >;

    /**
     * immunity period is set for a subnet.
     **/
    ImmunityPeriodSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "ImmunityPeriodSet",
      [number, number]
    >;

    /**
     * bonds moving average is set for a subnet.
     **/
    BondsMovingAverageSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "BondsMovingAverageSet",
      [number, bigint]
    >;

    /**
     * bonds penalty is set for a subnet.
     **/
    BondsPenaltySet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "BondsPenaltySet",
      [number, number]
    >;

    /**
     * bonds reset is set for a subnet.
     **/
    BondsResetOnSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "BondsResetOnSet",
      [number, boolean]
    >;

    /**
     * setting the max number of allowed validators on a subnet.
     **/
    MaxAllowedValidatorsSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "MaxAllowedValidatorsSet",
      [number, number]
    >;

    /**
     * the axon server information is added to the network.
     **/
    AxonServed: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "AxonServed",
      [number, AccountId32]
    >;

    /**
     * the prometheus server information is added to the network.
     **/
    PrometheusServed: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "PrometheusServed",
      [number, AccountId32]
    >;

    /**
     * a hotkey has become a delegate.
     **/
    DelegateAdded: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "DelegateAdded",
      [AccountId32, AccountId32, number]
    >;

    /**
     * the default take is set.
     **/
    DefaultTakeSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "DefaultTakeSet",
      number
    >;

    /**
     * weights version key is set for a network.
     **/
    WeightsVersionKeySet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "WeightsVersionKeySet",
      [number, bigint]
    >;

    /**
     * setting min difficulty on a network.
     **/
    MinDifficultySet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "MinDifficultySet",
      [number, bigint]
    >;

    /**
     * setting max difficulty on a network.
     **/
    MaxDifficultySet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "MaxDifficultySet",
      [number, bigint]
    >;

    /**
     * setting the prometheus serving rate limit.
     **/
    ServingRateLimitSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "ServingRateLimitSet",
      [number, bigint]
    >;

    /**
     * setting burn on a network.
     **/
    BurnSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "BurnSet",
      [number, bigint]
    >;

    /**
     * setting max burn on a network.
     **/
    MaxBurnSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "MaxBurnSet",
      [number, bigint]
    >;

    /**
     * setting min burn on a network.
     **/
    MinBurnSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "MinBurnSet",
      [number, bigint]
    >;

    /**
     * setting the transaction rate limit.
     **/
    TxRateLimitSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "TxRateLimitSet",
      bigint
    >;

    /**
     * setting the delegate take transaction rate limit.
     **/
    TxDelegateTakeRateLimitSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "TxDelegateTakeRateLimitSet",
      bigint
    >;

    /**
     * setting the childkey take transaction rate limit.
     **/
    TxChildKeyTakeRateLimitSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "TxChildKeyTakeRateLimitSet",
      bigint
    >;

    /**
     * minimum childkey take set
     **/
    MinChildKeyTakeSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "MinChildKeyTakeSet",
      number
    >;

    /**
     * maximum childkey take set
     **/
    MaxChildKeyTakeSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "MaxChildKeyTakeSet",
      number
    >;

    /**
     * childkey take set
     **/
    ChildKeyTakeSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "ChildKeyTakeSet",
      [AccountId32, number]
    >;

    /**
     * a sudo call is done.
     **/
    Sudid: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "Sudid",
      Result<[], DispatchError>
    >;

    /**
     * registration is allowed/disallowed for a subnet.
     **/
    RegistrationAllowed: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "RegistrationAllowed",
      [number, boolean]
    >;

    /**
     * POW registration is allowed/disallowed for a subnet.
     **/
    PowRegistrationAllowed: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "PowRegistrationAllowed",
      [number, boolean]
    >;

    /**
     * setting tempo on a network
     **/
    TempoSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "TempoSet",
      [number, number]
    >;

    /**
     * setting the RAO recycled for registration.
     **/
    RaoRecycledForRegistrationSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "RAORecycledForRegistrationSet",
      [number, bigint]
    >;

    /**
     * min stake is set for validators to set weights.
     **/
    StakeThresholdSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "StakeThresholdSet",
      bigint
    >;

    /**
     * setting the minimum required stake amount for senate registration.
     **/
    SenateRequiredStakePercentSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "SenateRequiredStakePercentSet",
      bigint
    >;

    /**
     * setting the adjustment alpha on a subnet.
     **/
    AdjustmentAlphaSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "AdjustmentAlphaSet",
      [number, bigint]
    >;

    /**
     * the faucet it called on the test net.
     **/
    Faucet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "Faucet",
      [AccountId32, bigint]
    >;

    /**
     * the subnet owner cut is set.
     **/
    SubnetOwnerCutSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "SubnetOwnerCutSet",
      number
    >;

    /**
     * the network creation rate limit is set.
     **/
    NetworkRateLimitSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "NetworkRateLimitSet",
      bigint
    >;

    /**
     * the network immunity period is set.
     **/
    NetworkImmunityPeriodSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "NetworkImmunityPeriodSet",
      bigint
    >;

    /**
     * the network minimum locking cost is set.
     **/
    NetworkMinLockCostSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "NetworkMinLockCostSet",
      bigint
    >;

    /**
     * the maximum number of subnets is set
     * the lock cost reduction is set
     **/
    NetworkLockCostReductionIntervalSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "NetworkLockCostReductionIntervalSet",
      bigint
    >;

    /**
     * the take for a delegate is decreased.
     **/
    TakeDecreased: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "TakeDecreased",
      [AccountId32, AccountId32, number]
    >;

    /**
     * the take for a delegate is increased.
     **/
    TakeIncreased: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "TakeIncreased",
      [AccountId32, AccountId32, number]
    >;

    /**
     * the hotkey is swapped
     **/
    HotkeySwapped: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "HotkeySwapped",
      {
        /**
         * the account ID of coldkey
         **/
        coldkey: AccountId32;

        /**
         * the account ID of old hotkey
         **/
        oldHotkey: AccountId32;

        /**
         * the account ID of new hotkey
         **/
        newHotkey: AccountId32;
      }
    >;

    /**
     * maximum delegate take is set by sudo/admin transaction
     **/
    MaxDelegateTakeSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "MaxDelegateTakeSet",
      number
    >;

    /**
     * minimum delegate take is set by sudo/admin transaction
     **/
    MinDelegateTakeSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "MinDelegateTakeSet",
      number
    >;

    /**
     * a member of the senate is adjusted
     **/
    SenateAdjusted: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "SenateAdjusted",
      {
        /**
         * the account ID of the old senate member, if any
         **/
        oldMember?: AccountId32 | undefined;

        /**
         * the account ID of the new senate member
         **/
        newMember: AccountId32;
      }
    >;

    /**
     * A coldkey has been swapped
     **/
    ColdkeySwapped: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "ColdkeySwapped",
      {
        /**
         * the account ID of old coldkey
         **/
        oldColdkey: AccountId32;

        /**
         * the account ID of new coldkey
         **/
        newColdkey: AccountId32;

        /**
         * the swap cost
         **/
        swapCost: bigint;
      }
    >;

    /**
     * All balance of a hotkey has been unstaked and transferred to a new coldkey
     **/
    AllBalanceUnstakedAndTransferredToNewColdkey: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "AllBalanceUnstakedAndTransferredToNewColdkey",
      {
        /**
         * The account ID of the current coldkey
         **/
        currentColdkey: AccountId32;

        /**
         * The account ID of the new coldkey
         **/
        newColdkey: AccountId32;

        /**
         * The total balance of the hotkey
         **/
        totalBalance: bigint;
      }
    >;

    /**
     * A coldkey swap has been scheduled
     **/
    ColdkeySwapScheduled: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "ColdkeySwapScheduled",
      {
        /**
         * The account ID of the old coldkey
         **/
        oldColdkey: AccountId32;

        /**
         * The account ID of the new coldkey
         **/
        newColdkey: AccountId32;

        /**
         * The arbitration block for the coldkey swap
         **/
        executionBlock: number;

        /**
         * The swap cost
         **/
        swapCost: bigint;
      }
    >;

    /**
     * The arbitration period has been extended
     **/
    ArbitrationPeriodExtended: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "ArbitrationPeriodExtended",
      {
        /**
         * The account ID of the coldkey
         **/
        coldkey: AccountId32;
      }
    >;

    /**
     * Setting of children of a hotkey have been scheduled
     **/
    SetChildrenScheduled: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "SetChildrenScheduled",
      [AccountId32, number, bigint, Array<[bigint, AccountId32]>]
    >;

    /**
     * The children of a hotkey have been set
     **/
    SetChildren: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "SetChildren",
      [AccountId32, number, Array<[bigint, AccountId32]>]
    >;

    /**
     * The identity of a coldkey has been set
     **/
    ChainIdentitySet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "ChainIdentitySet",
      AccountId32
    >;

    /**
     * The identity of a subnet has been set
     **/
    SubnetIdentitySet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "SubnetIdentitySet",
      number
    >;

    /**
     * The identity of a subnet has been removed
     **/
    SubnetIdentityRemoved: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "SubnetIdentityRemoved",
      number
    >;

    /**
     * A dissolve network extrinsic scheduled.
     **/
    DissolveNetworkScheduled: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "DissolveNetworkScheduled",
      {
        /**
         * The account ID schedule the dissolve network extrisnic
         **/
        account: AccountId32;

        /**
         * network ID will be dissolved
         **/
        netuid: number;

        /**
         * extrinsic execution block number
         **/
        executionBlock: number;
      }
    >;

    /**
     * The duration of schedule coldkey swap has been set
     **/
    ColdkeySwapScheduleDurationSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "ColdkeySwapScheduleDurationSet",
      number
    >;

    /**
     * The duration of dissolve network has been set
     **/
    DissolveNetworkScheduleDurationSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "DissolveNetworkScheduleDurationSet",
      number
    >;

    /**
     * Commit-reveal v3 weights have been successfully committed.
     *
     * - **who**: The account ID of the user committing the weights.
     * - **netuid**: The network identifier.
     * - **commit_hash**: The hash representing the committed weights.
     **/
    Crv3WeightsCommitted: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "CRV3WeightsCommitted",
      [AccountId32, number, H256]
    >;

    /**
     * Weights have been successfully committed.
     *
     * - **who**: The account ID of the user committing the weights.
     * - **netuid**: The network identifier.
     * - **commit_hash**: The hash representing the committed weights.
     **/
    WeightsCommitted: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "WeightsCommitted",
      [AccountId32, number, H256]
    >;

    /**
     * Weights have been successfully revealed.
     *
     * - **who**: The account ID of the user revealing the weights.
     * - **netuid**: The network identifier.
     * - **commit_hash**: The hash of the revealed weights.
     **/
    WeightsRevealed: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "WeightsRevealed",
      [AccountId32, number, H256]
    >;

    /**
     * Weights have been successfully batch revealed.
     *
     * - **who**: The account ID of the user revealing the weights.
     * - **netuid**: The network identifier.
     * - **revealed_hashes**: A vector of hashes representing each revealed weight set.
     **/
    WeightsBatchRevealed: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "WeightsBatchRevealed",
      [AccountId32, number, Array<H256>]
    >;

    /**
     * A batch of weights (or commits) have been force-set.
     *
     * - **netuids**: The netuids these weights were successfully set/committed for.
     * - **who**: The hotkey that set this batch.
     **/
    BatchWeightsCompleted: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "BatchWeightsCompleted",
      [Array<number>, AccountId32]
    >;

    /**
     * A batch extrinsic completed but with some errors.
     **/
    BatchCompletedWithErrors: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "BatchCompletedWithErrors",
      null
    >;

    /**
     * A weight set among a batch of weights failed.
     *
     * - **error**: The dispatch error emitted by the failed item.
     **/
    BatchWeightItemFailed: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "BatchWeightItemFailed",
      DispatchError
    >;

    /**
     * Stake has been transferred from one coldkey to another on the same subnet.
     * Parameters:
     * (origin_coldkey, destination_coldkey, hotkey, origin_netuid, destination_netuid, amount)
     **/
    StakeTransferred: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "StakeTransferred",
      [AccountId32, AccountId32, AccountId32, number, number, bigint]
    >;

    /**
     * Stake has been swapped from one subnet to another for the same coldkey-hotkey pair.
     *
     * Parameters:
     * (coldkey, hotkey, origin_netuid, destination_netuid, amount)
     **/
    StakeSwapped: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "StakeSwapped",
      [AccountId32, AccountId32, number, number, bigint]
    >;

    /**
     * Event called when transfer is toggled on a subnet.
     *
     * Parameters:
     * (netuid, bool)
     **/
    TransferToggle: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "TransferToggle",
      [number, boolean]
    >;

    /**
     * The owner hotkey for a subnet has been set.
     *
     * Parameters:
     * (netuid, new_hotkey)
     **/
    SubnetOwnerHotkeySet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "SubnetOwnerHotkeySet",
      [number, AccountId32]
    >;

    /**
     * FirstEmissionBlockNumber is set via start call extrinsic
     *
     * Parameters:
     * netuid
     * block number
     **/
    FirstEmissionBlockNumberSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "FirstEmissionBlockNumberSet",
      [number, bigint]
    >;

    /**
     * Alpha has been recycled, reducing AlphaOut on a subnet.
     *
     * Parameters:
     * (coldkey, hotkey, amount, subnet_id)
     **/
    AlphaRecycled: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "AlphaRecycled",
      [AccountId32, AccountId32, bigint, number]
    >;

    /**
     * Alpha have been burned without reducing AlphaOut.
     *
     * Parameters:
     * (coldkey, hotkey, amount, subnet_id)
     **/
    AlphaBurned: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "AlphaBurned",
      [AccountId32, AccountId32, bigint, number]
    >;

    /**
     * An EVM key has been associated with a hotkey.
     **/
    EvmKeyAssociated: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "EvmKeyAssociated",
      {
        /**
         * The subnet that the hotkey belongs to.
         **/
        netuid: number;

        /**
         * The hotkey associated with the EVM key.
         **/
        hotkey: AccountId32;

        /**
         * The EVM key being associated with the hotkey.
         **/
        evmKey: H160;

        /**
         * The block where the association happened.
         **/
        blockAssociated: bigint;
      }
    >;

    /**
     * CRV3 Weights have been successfully revealed.
     *
     * - **netuid**: The network identifier.
     * - **who**: The account ID of the user revealing the weights.
     **/
    Crv3WeightsRevealed: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "CRV3WeightsRevealed",
      [number, AccountId32]
    >;

    /**
     * Commit-Reveal periods has been successfully set.
     *
     * - **netuid**: The network identifier.
     * - **periods**: The number of epochs before the reveal.
     **/
    CommitRevealPeriodsSet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "CommitRevealPeriodsSet",
      [number, bigint]
    >;

    /**
     * Commit-Reveal has been successfully toggled.
     *
     * - **netuid**: The network identifier.
     * - **Enabled**: Is Commit-Reveal enabled.
     **/
    CommitRevealEnabled: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "CommitRevealEnabled",
      [number, boolean]
    >;

    /**
     * the hotkey is swapped
     **/
    HotkeySwappedOnSubnet: GenericPalletEvent<
      Rv,
      "SubtensorModule",
      "HotkeySwappedOnSubnet",
      {
        /**
         * the account ID of coldkey
         **/
        coldkey: AccountId32;

        /**
         * the account ID of old hotkey
         **/
        oldHotkey: AccountId32;

        /**
         * the account ID of new hotkey
         **/
        newHotkey: AccountId32;

        /**
         * the subnet ID
         **/
        netuid: number;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Triumvirate`'s events
   **/
  triumvirate: {
    /**
     * A motion (given hash) has been proposed (by given account) with a threshold (given
     * `MemberCount`).
     **/
    Proposed: GenericPalletEvent<
      Rv,
      "Triumvirate",
      "Proposed",
      {
        /**
         * The account that proposed the motion.
         **/
        account: AccountId32;

        /**
         * The index of the proposal.
         **/
        proposalIndex: number;

        /**
         * The hash of the proposal.
         **/
        proposalHash: H256;

        /**
         * The threshold of member for the proposal.
         **/
        threshold: number;
      }
    >;

    /**
     * A motion (given hash) has been voted on by given account, leaving
     * a tally (yes votes and no votes given respectively as `MemberCount`).
     **/
    Voted: GenericPalletEvent<
      Rv,
      "Triumvirate",
      "Voted",
      {
        /**
         * The account that voted.
         **/
        account: AccountId32;

        /**
         * The hash of the proposal.
         **/
        proposalHash: H256;

        /**
         * Whether the account voted aye.
         **/
        voted: boolean;

        /**
         * The number of yes votes.
         **/
        yes: number;

        /**
         * The number of no votes.
         **/
        no: number;
      }
    >;

    /**
     * A motion was approved by the required threshold.
     **/
    Approved: GenericPalletEvent<
      Rv,
      "Triumvirate",
      "Approved",
      {
        /**
         * The hash of the proposal.
         **/
        proposalHash: H256;
      }
    >;

    /**
     * A motion was not approved by the required threshold.
     **/
    Disapproved: GenericPalletEvent<
      Rv,
      "Triumvirate",
      "Disapproved",
      {
        /**
         * The hash of the proposal.
         **/
        proposalHash: H256;
      }
    >;

    /**
     * A motion was executed; result will be `Ok` if it returned without error.
     **/
    Executed: GenericPalletEvent<
      Rv,
      "Triumvirate",
      "Executed",
      {
        /**
         * The hash of the proposal.
         **/
        proposalHash: H256;

        /**
         * The result of the execution.
         **/
        result: Result<[], DispatchError>;
      }
    >;

    /**
     * A single member did some action; result will be `Ok` if it returned without error.
     **/
    MemberExecuted: GenericPalletEvent<
      Rv,
      "Triumvirate",
      "MemberExecuted",
      {
        /**
         * The hash of the proposal.
         **/
        proposalHash: H256;

        /**
         * The result of the execution.
         **/
        result: Result<[], DispatchError>;
      }
    >;

    /**
     * A proposal was closed because its threshold was reached or after its duration was up.
     **/
    Closed: GenericPalletEvent<
      Rv,
      "Triumvirate",
      "Closed",
      {
        /**
         * The hash of the proposal.
         **/
        proposalHash: H256;

        /**
         * Whether the proposal was approved.
         **/
        yes: number;

        /**
         * Whether the proposal was rejected.
         **/
        no: number;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `TriumvirateMembers`'s events
   **/
  triumvirateMembers: {
    /**
     * The given member was added; see the transaction for who.
     **/
    MemberAdded: GenericPalletEvent<
      Rv,
      "TriumvirateMembers",
      "MemberAdded",
      undefined
    >;

    /**
     * The given member was removed; see the transaction for who.
     **/
    MemberRemoved: GenericPalletEvent<
      Rv,
      "TriumvirateMembers",
      "MemberRemoved",
      undefined
    >;

    /**
     * Two members were swapped; see the transaction for who.
     **/
    MembersSwapped: GenericPalletEvent<
      Rv,
      "TriumvirateMembers",
      "MembersSwapped",
      undefined
    >;

    /**
     * The membership was reset; see the transaction for who the new set is.
     **/
    MembersReset: GenericPalletEvent<
      Rv,
      "TriumvirateMembers",
      "MembersReset",
      undefined
    >;

    /**
     * One of the members' keys changed.
     **/
    KeyChanged: GenericPalletEvent<
      Rv,
      "TriumvirateMembers",
      "KeyChanged",
      undefined
    >;

    /**
     * Phantom member, never used.
     **/
    Dummy: GenericPalletEvent<Rv, "TriumvirateMembers", "Dummy", undefined>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `SenateMembers`'s events
   **/
  senateMembers: {
    /**
     * The given member was added; see the transaction for who.
     **/
    MemberAdded: GenericPalletEvent<
      Rv,
      "SenateMembers",
      "MemberAdded",
      undefined
    >;

    /**
     * The given member was removed; see the transaction for who.
     **/
    MemberRemoved: GenericPalletEvent<
      Rv,
      "SenateMembers",
      "MemberRemoved",
      undefined
    >;

    /**
     * Two members were swapped; see the transaction for who.
     **/
    MembersSwapped: GenericPalletEvent<
      Rv,
      "SenateMembers",
      "MembersSwapped",
      undefined
    >;

    /**
     * The membership was reset; see the transaction for who the new set is.
     **/
    MembersReset: GenericPalletEvent<
      Rv,
      "SenateMembers",
      "MembersReset",
      undefined
    >;

    /**
     * One of the members' keys changed.
     **/
    KeyChanged: GenericPalletEvent<
      Rv,
      "SenateMembers",
      "KeyChanged",
      undefined
    >;

    /**
     * Phantom member, never used.
     **/
    Dummy: GenericPalletEvent<Rv, "SenateMembers", "Dummy", undefined>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Utility`'s events
   **/
  utility: {
    /**
     * Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     * well as the error.
     **/
    BatchInterrupted: GenericPalletEvent<
      Rv,
      "Utility",
      "BatchInterrupted",
      { index: number; error: DispatchError }
    >;

    /**
     * Batch of dispatches completed fully with no error.
     **/
    BatchCompleted: GenericPalletEvent<Rv, "Utility", "BatchCompleted", null>;

    /**
     * Batch of dispatches completed but has errors.
     **/
    BatchCompletedWithErrors: GenericPalletEvent<
      Rv,
      "Utility",
      "BatchCompletedWithErrors",
      null
    >;

    /**
     * A single item within a Batch of dispatches has completed with no error.
     **/
    ItemCompleted: GenericPalletEvent<Rv, "Utility", "ItemCompleted", null>;

    /**
     * A single item within a Batch of dispatches has completed with error.
     **/
    ItemFailed: GenericPalletEvent<
      Rv,
      "Utility",
      "ItemFailed",
      { error: DispatchError }
    >;

    /**
     * A call was dispatched.
     **/
    DispatchedAs: GenericPalletEvent<
      Rv,
      "Utility",
      "DispatchedAs",
      { result: Result<[], DispatchError> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Sudo`'s events
   **/
  sudo: {
    /**
     * A sudo call just took place.
     **/
    Sudid: GenericPalletEvent<
      Rv,
      "Sudo",
      "Sudid",
      {
        /**
         * The result of the call made by the sudo user.
         **/
        sudoResult: Result<[], DispatchError>;
      }
    >;

    /**
     * The sudo key has been updated.
     **/
    KeyChanged: GenericPalletEvent<
      Rv,
      "Sudo",
      "KeyChanged",
      {
        /**
         * The old sudo key (if one was previously set).
         **/
        old?: AccountId32 | undefined;

        /**
         * The new sudo key (if one was set).
         **/
        new: AccountId32;
      }
    >;

    /**
     * The key was permanently removed.
     **/
    KeyRemoved: GenericPalletEvent<Rv, "Sudo", "KeyRemoved", null>;

    /**
     * A [sudo_as](Pallet::sudo_as) call just took place.
     **/
    SudoAsDone: GenericPalletEvent<
      Rv,
      "Sudo",
      "SudoAsDone",
      {
        /**
         * The result of the call made by the sudo user.
         **/
        sudoResult: Result<[], DispatchError>;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Multisig`'s events
   **/
  multisig: {
    /**
     * A new multisig operation has begun.
     **/
    NewMultisig: GenericPalletEvent<
      Rv,
      "Multisig",
      "NewMultisig",
      {
        approving: AccountId32;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      }
    >;

    /**
     * A multisig operation has been approved by someone.
     **/
    MultisigApproval: GenericPalletEvent<
      Rv,
      "Multisig",
      "MultisigApproval",
      {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      }
    >;

    /**
     * A multisig operation has been executed.
     **/
    MultisigExecuted: GenericPalletEvent<
      Rv,
      "Multisig",
      "MultisigExecuted",
      {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
        result: Result<[], DispatchError>;
      }
    >;

    /**
     * A multisig operation has been cancelled.
     **/
    MultisigCancelled: GenericPalletEvent<
      Rv,
      "Multisig",
      "MultisigCancelled",
      {
        cancelling: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Preimage`'s events
   **/
  preimage: {
    /**
     * A preimage has been noted.
     **/
    Noted: GenericPalletEvent<Rv, "Preimage", "Noted", { hash: H256 }>;

    /**
     * A preimage has been requested.
     **/
    Requested: GenericPalletEvent<Rv, "Preimage", "Requested", { hash: H256 }>;

    /**
     * A preimage has ben cleared.
     **/
    Cleared: GenericPalletEvent<Rv, "Preimage", "Cleared", { hash: H256 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Scheduler`'s events
   **/
  scheduler: {
    /**
     * Scheduled some task.
     **/
    Scheduled: GenericPalletEvent<
      Rv,
      "Scheduler",
      "Scheduled",
      { when: number; index: number }
    >;

    /**
     * Canceled some task.
     **/
    Canceled: GenericPalletEvent<
      Rv,
      "Scheduler",
      "Canceled",
      { when: number; index: number }
    >;

    /**
     * Dispatched some task.
     **/
    Dispatched: GenericPalletEvent<
      Rv,
      "Scheduler",
      "Dispatched",
      {
        task: [number, number];
        id?: FixedBytes<32> | undefined;
        result: Result<[], DispatchError>;
      }
    >;

    /**
     * Set a retry configuration for some task.
     **/
    RetrySet: GenericPalletEvent<
      Rv,
      "Scheduler",
      "RetrySet",
      {
        task: [number, number];
        id?: FixedBytes<32> | undefined;
        period: number;
        retries: number;
      }
    >;

    /**
     * Cancel a retry configuration for some task.
     **/
    RetryCancelled: GenericPalletEvent<
      Rv,
      "Scheduler",
      "RetryCancelled",
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The call for the provided hash was not found so the task has been aborted.
     **/
    CallUnavailable: GenericPalletEvent<
      Rv,
      "Scheduler",
      "CallUnavailable",
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task was unable to be renewed since the agenda is full at that block.
     **/
    PeriodicFailed: GenericPalletEvent<
      Rv,
      "Scheduler",
      "PeriodicFailed",
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task was unable to be retried since the agenda is full at that block or there
     * was not enough weight to reschedule it.
     **/
    RetryFailed: GenericPalletEvent<
      Rv,
      "Scheduler",
      "RetryFailed",
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task can never be executed since it is overweight.
     **/
    PermanentlyOverweight: GenericPalletEvent<
      Rv,
      "Scheduler",
      "PermanentlyOverweight",
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Proxy`'s events
   **/
  proxy: {
    /**
     * A proxy was executed correctly, with the given.
     **/
    ProxyExecuted: GenericPalletEvent<
      Rv,
      "Proxy",
      "ProxyExecuted",
      { result: Result<[], DispatchError> }
    >;

    /**
     * A pure account has been created by new proxy with given
     * disambiguation index and proxy type.
     **/
    PureCreated: GenericPalletEvent<
      Rv,
      "Proxy",
      "PureCreated",
      {
        pure: AccountId32;
        who: AccountId32;
        proxyType: SubtensorRuntimeCommonProxyType;
        disambiguationIndex: number;
      }
    >;

    /**
     * An announcement was placed to make a call in the future.
     **/
    Announced: GenericPalletEvent<
      Rv,
      "Proxy",
      "Announced",
      { real: AccountId32; proxy: AccountId32; callHash: H256 }
    >;

    /**
     * A proxy was added.
     **/
    ProxyAdded: GenericPalletEvent<
      Rv,
      "Proxy",
      "ProxyAdded",
      {
        delegator: AccountId32;
        delegatee: AccountId32;
        proxyType: SubtensorRuntimeCommonProxyType;
        delay: number;
      }
    >;

    /**
     * A proxy was removed.
     **/
    ProxyRemoved: GenericPalletEvent<
      Rv,
      "Proxy",
      "ProxyRemoved",
      {
        delegator: AccountId32;
        delegatee: AccountId32;
        proxyType: SubtensorRuntimeCommonProxyType;
        delay: number;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Registry`'s events
   **/
  registry: {
    /**
     * Emitted when a user registers an identity
     **/
    IdentitySet: GenericPalletEvent<
      Rv,
      "Registry",
      "IdentitySet",
      {
        /**
         * The account that registered the identity
         **/
        who: AccountId32;
      }
    >;

    /**
     * Emitted when a user dissolves an identity
     **/
    IdentityDissolved: GenericPalletEvent<
      Rv,
      "Registry",
      "IdentityDissolved",
      {
        /**
         * The account that dissolved the identity
         **/
        who: AccountId32;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Commitments`'s events
   **/
  commitments: {
    /**
     * A commitment was set
     **/
    Commitment: GenericPalletEvent<
      Rv,
      "Commitments",
      "Commitment",
      {
        /**
         * The netuid of the commitment
         **/
        netuid: number;

        /**
         * The account
         **/
        who: AccountId32;
      }
    >;

    /**
     * A timelock-encrypted commitment was set
     **/
    TimelockCommitment: GenericPalletEvent<
      Rv,
      "Commitments",
      "TimelockCommitment",
      {
        /**
         * The netuid of the commitment
         **/
        netuid: number;

        /**
         * The account
         **/
        who: AccountId32;

        /**
         * The drand round to reveal
         **/
        revealRound: bigint;
      }
    >;

    /**
     * A timelock-encrypted commitment was auto-revealed
     **/
    CommitmentRevealed: GenericPalletEvent<
      Rv,
      "Commitments",
      "CommitmentRevealed",
      {
        /**
         * The netuid of the commitment
         **/
        netuid: number;

        /**
         * The account
         **/
        who: AccountId32;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `AdminUtils`'s events
   **/
  adminUtils: {
    /**
     * Event emitted when a precompile operation is updated.
     **/
    PrecompileUpdated: GenericPalletEvent<
      Rv,
      "AdminUtils",
      "PrecompileUpdated",
      {
        /**
         * The type of precompile operation being updated.
         **/
        precompileId: PalletAdminUtilsPrecompileEnum;

        /**
         * Indicates if the precompile operation is enabled or not.
         **/
        enabled: boolean;
      }
    >;

    /**
     * Event emitted when the Yuma3 enable is toggled.
     **/
    Yuma3EnableToggled: GenericPalletEvent<
      Rv,
      "AdminUtils",
      "Yuma3EnableToggled",
      {
        /**
         * The network identifier.
         **/
        netuid: number;

        /**
         * Indicates if the Yuma3 enable was enabled or disabled.
         **/
        enabled: boolean;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `SafeMode`'s events
   **/
  safeMode: {
    /**
     * The safe-mode was entered until inclusively this block.
     **/
    Entered: GenericPalletEvent<Rv, "SafeMode", "Entered", { until: number }>;

    /**
     * The safe-mode was extended until inclusively this block.
     **/
    Extended: GenericPalletEvent<Rv, "SafeMode", "Extended", { until: number }>;

    /**
     * Exited the safe-mode for a specific reason.
     **/
    Exited: GenericPalletEvent<
      Rv,
      "SafeMode",
      "Exited",
      { reason: PalletSafeModeExitReason }
    >;

    /**
     * An account reserved funds for either entering or extending the safe-mode.
     **/
    DepositPlaced: GenericPalletEvent<
      Rv,
      "SafeMode",
      "DepositPlaced",
      { account: AccountId32; amount: bigint }
    >;

    /**
     * An account had a reserve released that was reserved.
     **/
    DepositReleased: GenericPalletEvent<
      Rv,
      "SafeMode",
      "DepositReleased",
      { account: AccountId32; amount: bigint }
    >;

    /**
     * An account had reserve slashed that was reserved.
     **/
    DepositSlashed: GenericPalletEvent<
      Rv,
      "SafeMode",
      "DepositSlashed",
      { account: AccountId32; amount: bigint }
    >;

    /**
     * Could not hold funds for entering or extending the safe-mode.
     *
     * This error comes from the underlying `Currency`.
     **/
    CannotDeposit: GenericPalletEvent<Rv, "SafeMode", "CannotDeposit", null>;

    /**
     * Could not release funds for entering or extending the safe-mode.
     *
     * This error comes from the underlying `Currency`.
     **/
    CannotRelease: GenericPalletEvent<Rv, "SafeMode", "CannotRelease", null>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Ethereum`'s events
   **/
  ethereum: {
    /**
     * An ethereum transaction was successfully executed.
     **/
    Executed: GenericPalletEvent<
      Rv,
      "Ethereum",
      "Executed",
      {
        from: H160;
        to: H160;
        transactionHash: H256;
        exitReason: EvmCoreErrorExitReason;
        extraData: Bytes;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `EVM`'s events
   **/
  evm: {
    /**
     * Ethereum events from contracts.
     **/
    Log: GenericPalletEvent<Rv, "EVM", "Log", { log: EthereumLog }>;

    /**
     * A contract has been created at given address.
     **/
    Created: GenericPalletEvent<Rv, "EVM", "Created", { address: H160 }>;

    /**
     * A contract was attempted to be created, but the execution failed.
     **/
    CreatedFailed: GenericPalletEvent<
      Rv,
      "EVM",
      "CreatedFailed",
      { address: H160 }
    >;

    /**
     * A contract has been executed successfully with states applied.
     **/
    Executed: GenericPalletEvent<Rv, "EVM", "Executed", { address: H160 }>;

    /**
     * A contract has been executed with errors. States are reverted with only gas fees applied.
     **/
    ExecutedFailed: GenericPalletEvent<
      Rv,
      "EVM",
      "ExecutedFailed",
      { address: H160 }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `BaseFee`'s events
   **/
  baseFee: {
    NewBaseFeePerGas: GenericPalletEvent<
      Rv,
      "BaseFee",
      "NewBaseFeePerGas",
      { fee: U256 }
    >;
    BaseFeeOverflow: GenericPalletEvent<Rv, "BaseFee", "BaseFeeOverflow", null>;
    NewElasticity: GenericPalletEvent<
      Rv,
      "BaseFee",
      "NewElasticity",
      { elasticity: Permill }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Drand`'s events
   **/
  drand: {
    BeaconConfigChanged: GenericPalletEvent<
      Rv,
      "Drand",
      "BeaconConfigChanged",
      null
    >;

    /**
     * Successfully set a new pulse(s).
     **/
    NewPulse: GenericPalletEvent<
      Rv,
      "Drand",
      "NewPulse",
      { rounds: Array<bigint> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Crowdloan`'s events
   **/
  crowdloan: {
    /**
     * A crowdloan was created.
     **/
    Created: GenericPalletEvent<
      Rv,
      "Crowdloan",
      "Created",
      { crowdloanId: number; creator: AccountId32; end: number; cap: bigint }
    >;

    /**
     * A contribution was made to an active crowdloan.
     **/
    Contributed: GenericPalletEvent<
      Rv,
      "Crowdloan",
      "Contributed",
      { crowdloanId: number; contributor: AccountId32; amount: bigint }
    >;

    /**
     * A contribution was withdrawn from a failed crowdloan.
     **/
    Withdrew: GenericPalletEvent<
      Rv,
      "Crowdloan",
      "Withdrew",
      { crowdloanId: number; contributor: AccountId32; amount: bigint }
    >;

    /**
     * A refund was partially processed for a failed crowdloan.
     **/
    PartiallyRefunded: GenericPalletEvent<
      Rv,
      "Crowdloan",
      "PartiallyRefunded",
      { crowdloanId: number }
    >;

    /**
     * A refund was fully processed for a failed crowdloan.
     **/
    AllRefunded: GenericPalletEvent<
      Rv,
      "Crowdloan",
      "AllRefunded",
      { crowdloanId: number }
    >;

    /**
     * A crowdloan was finalized, funds were transferred and the call was dispatched.
     **/
    Finalized: GenericPalletEvent<
      Rv,
      "Crowdloan",
      "Finalized",
      { crowdloanId: number }
    >;

    /**
     * A crowdloan was dissolved.
     **/
    Dissolved: GenericPalletEvent<
      Rv,
      "Crowdloan",
      "Dissolved",
      { crowdloanId: number }
    >;

    /**
     * The minimum contribution was updated.
     **/
    MinContributionUpdated: GenericPalletEvent<
      Rv,
      "Crowdloan",
      "MinContributionUpdated",
      { crowdloanId: number; newMinContribution: bigint }
    >;

    /**
     * The end was updated.
     **/
    EndUpdated: GenericPalletEvent<
      Rv,
      "Crowdloan",
      "EndUpdated",
      { crowdloanId: number; newEnd: number }
    >;

    /**
     * The cap was updated.
     **/
    CapUpdated: GenericPalletEvent<
      Rv,
      "Crowdloan",
      "CapUpdated",
      { crowdloanId: number; newCap: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
}
