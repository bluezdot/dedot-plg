// Generated by dedot cli

import type {
  GenericChainTx,
  GenericTxCall,
  ISubmittableExtrinsic,
  ISubmittableResult,
  IRuntimeTxCall,
  RpcVersion,
  RpcV2,
  ISubmittableExtrinsicLegacy,
} from "dedot/types";
import type {
  MultiAddressLike,
  Extrinsic,
  BytesLike,
  H256,
  AccountId32Like,
  Percent,
  Perbill,
  FixedBytes,
  Data,
} from "dedot/codecs";
import type {
  DaRuntimeRuntimeCallLike,
  SpRuntimeMultiSignature,
  FrameSystemEventRecord,
  DaRuntimeOriginCaller,
  SpWeightsWeightV2Weight,
  SpConsensusSlotsEquivocationProof,
  SpSessionMembershipProof,
  SpConsensusBabeDigestsNextConfigDescriptor,
  PalletBalancesAdjustmentDirection,
  PalletElectionProviderMultiPhaseRawSolution,
  PalletElectionProviderMultiPhaseSolutionOrSnapshotSize,
  SpNposElectionsElectionScore,
  SpNposElectionsSupport,
  PalletStakingRewardDestination,
  PalletStakingValidatorPrefs,
  PalletStakingPalletConfigOp,
  PalletStakingPalletConfigOpU32,
  PalletStakingPalletConfigOpPercent,
  PalletStakingPalletConfigOpPerbill,
  DaRuntimePrimitivesSessionKeys,
  SpConsensusGrandpaEquivocationProof,
  PalletImOnlineHeartbeat,
  PalletImOnlineSr25519AppSr25519Signature,
  FrameSupportDispatchDispatchFeeModifier,
  PalletMultisigTimepoint,
  PalletNominationPoolsBondExtra,
  PalletNominationPoolsPoolState,
  PalletNominationPoolsConfigOp,
  PalletNominationPoolsConfigOpU32,
  PalletNominationPoolsConfigOpPerbill,
  PalletNominationPoolsConfigOp004,
  PalletNominationPoolsClaimPermission,
  PalletNominationPoolsCommissionChangeRate,
  PalletNominationPoolsCommissionClaimPermission,
  PalletIdentityLegacyIdentityInfo,
  PalletIdentityJudgement,
  AvailCoreDataProofMessageAddressedMessage,
  AvailCoreDataProofMessage,
  PalletVectorStateConfiguration,
  DaRuntimeImplsProxyType,
} from "./types";

export type ChainSubmittableExtrinsic<
  Rv extends RpcVersion,
  T extends IRuntimeTxCall = DaRuntimeRuntimeCallLike,
> = Extrinsic<MultiAddressLike, T, SpRuntimeMultiSignature, any[]> &
  (Rv extends RpcV2
    ? ISubmittableExtrinsic<ISubmittableResult<FrameSystemEventRecord>>
    : ISubmittableExtrinsicLegacy<ISubmittableResult<FrameSystemEventRecord>>);

export type TxCall<Rv extends RpcVersion> = (
  ...args: any[]
) => ChainSubmittableExtrinsic<Rv>;

export interface ChainTx<Rv extends RpcVersion>
  extends GenericChainTx<Rv, TxCall<Rv>> {
  /**
   * Pallet `System`'s transaction calls
   **/
  system: {
    /**
     * See [`Pallet::remark`].
     *
     * @param {BytesLike} remark
     **/
    remark: GenericTxCall<
      Rv,
      (remark: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "System";
          palletCall: {
            name: "Remark";
            params: { remark: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_heap_pages`].
     *
     * @param {bigint} pages
     **/
    setHeapPages: GenericTxCall<
      Rv,
      (pages: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "System";
          palletCall: {
            name: "SetHeapPages";
            params: { pages: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_code`].
     *
     * @param {BytesLike} code
     **/
    setCode: GenericTxCall<
      Rv,
      (code: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "System";
          palletCall: {
            name: "SetCode";
            params: { code: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_code_without_checks`].
     *
     * @param {BytesLike} code
     **/
    setCodeWithoutChecks: GenericTxCall<
      Rv,
      (code: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "System";
          palletCall: {
            name: "SetCodeWithoutChecks";
            params: { code: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_storage`].
     *
     * @param {Array<[BytesLike, BytesLike]>} items
     **/
    setStorage: GenericTxCall<
      Rv,
      (items: Array<[BytesLike, BytesLike]>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "System";
          palletCall: {
            name: "SetStorage";
            params: { items: Array<[BytesLike, BytesLike]> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::kill_storage`].
     *
     * @param {Array<BytesLike>} keys
     **/
    killStorage: GenericTxCall<
      Rv,
      (keys: Array<BytesLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "System";
          palletCall: {
            name: "KillStorage";
            params: { keys: Array<BytesLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::kill_prefix`].
     *
     * @param {BytesLike} prefix
     * @param {number} subkeys
     **/
    killPrefix: GenericTxCall<
      Rv,
      (
        prefix: BytesLike,
        subkeys: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "System";
          palletCall: {
            name: "KillPrefix";
            params: { prefix: BytesLike; subkeys: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remark_with_event`].
     *
     * @param {BytesLike} remark
     **/
    remarkWithEvent: GenericTxCall<
      Rv,
      (remark: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "System";
          palletCall: {
            name: "RemarkWithEvent";
            params: { remark: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::authorize_upgrade`].
     *
     * @param {H256} codeHash
     **/
    authorizeUpgrade: GenericTxCall<
      Rv,
      (codeHash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "System";
          palletCall: {
            name: "AuthorizeUpgrade";
            params: { codeHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::authorize_upgrade_without_checks`].
     *
     * @param {H256} codeHash
     **/
    authorizeUpgradeWithoutChecks: GenericTxCall<
      Rv,
      (codeHash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "System";
          palletCall: {
            name: "AuthorizeUpgradeWithoutChecks";
            params: { codeHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::apply_authorized_upgrade`].
     *
     * @param {BytesLike} code
     **/
    applyAuthorizedUpgrade: GenericTxCall<
      Rv,
      (code: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "System";
          palletCall: {
            name: "ApplyAuthorizedUpgrade";
            params: { code: BytesLike };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Utility`'s transaction calls
   **/
  utility: {
    /**
     * See [`Pallet::batch`].
     *
     * @param {Array<DaRuntimeRuntimeCallLike>} calls
     **/
    batch: GenericTxCall<
      Rv,
      (calls: Array<DaRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Utility";
          palletCall: {
            name: "Batch";
            params: { calls: Array<DaRuntimeRuntimeCallLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::as_derivative`].
     *
     * @param {number} index
     * @param {DaRuntimeRuntimeCallLike} call
     **/
    asDerivative: GenericTxCall<
      Rv,
      (
        index: number,
        call: DaRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Utility";
          palletCall: {
            name: "AsDerivative";
            params: { index: number; call: DaRuntimeRuntimeCallLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::batch_all`].
     *
     * @param {Array<DaRuntimeRuntimeCallLike>} calls
     **/
    batchAll: GenericTxCall<
      Rv,
      (calls: Array<DaRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Utility";
          palletCall: {
            name: "BatchAll";
            params: { calls: Array<DaRuntimeRuntimeCallLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::dispatch_as`].
     *
     * @param {DaRuntimeOriginCaller} asOrigin
     * @param {DaRuntimeRuntimeCallLike} call
     **/
    dispatchAs: GenericTxCall<
      Rv,
      (
        asOrigin: DaRuntimeOriginCaller,
        call: DaRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Utility";
          palletCall: {
            name: "DispatchAs";
            params: {
              asOrigin: DaRuntimeOriginCaller;
              call: DaRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_batch`].
     *
     * @param {Array<DaRuntimeRuntimeCallLike>} calls
     **/
    forceBatch: GenericTxCall<
      Rv,
      (calls: Array<DaRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Utility";
          palletCall: {
            name: "ForceBatch";
            params: { calls: Array<DaRuntimeRuntimeCallLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::with_weight`].
     *
     * @param {DaRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} weight
     **/
    withWeight: GenericTxCall<
      Rv,
      (
        call: DaRuntimeRuntimeCallLike,
        weight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Utility";
          palletCall: {
            name: "WithWeight";
            params: {
              call: DaRuntimeRuntimeCallLike;
              weight: SpWeightsWeightV2Weight;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Babe`'s transaction calls
   **/
  babe: {
    /**
     * See [`Pallet::report_equivocation`].
     *
     * @param {SpConsensusSlotsEquivocationProof} equivocationProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportEquivocation: GenericTxCall<
      Rv,
      (
        equivocationProof: SpConsensusSlotsEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Babe";
          palletCall: {
            name: "ReportEquivocation";
            params: {
              equivocationProof: SpConsensusSlotsEquivocationProof;
              keyOwnerProof: SpSessionMembershipProof;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::report_equivocation_unsigned`].
     *
     * @param {SpConsensusSlotsEquivocationProof} equivocationProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportEquivocationUnsigned: GenericTxCall<
      Rv,
      (
        equivocationProof: SpConsensusSlotsEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Babe";
          palletCall: {
            name: "ReportEquivocationUnsigned";
            params: {
              equivocationProof: SpConsensusSlotsEquivocationProof;
              keyOwnerProof: SpSessionMembershipProof;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::plan_config_change`].
     *
     * @param {SpConsensusBabeDigestsNextConfigDescriptor} config
     **/
    planConfigChange: GenericTxCall<
      Rv,
      (
        config: SpConsensusBabeDigestsNextConfigDescriptor,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Babe";
          palletCall: {
            name: "PlanConfigChange";
            params: { config: SpConsensusBabeDigestsNextConfigDescriptor };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Timestamp`'s transaction calls
   **/
  timestamp: {
    /**
     * See [`Pallet::set`].
     *
     * @param {bigint} now
     **/
    set: GenericTxCall<
      Rv,
      (now: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Timestamp";
          palletCall: {
            name: "Set";
            params: { now: bigint };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Indices`'s transaction calls
   **/
  indices: {
    /**
     * See [`Pallet::claim`].
     *
     * @param {number} index
     **/
    claim: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Indices";
          palletCall: {
            name: "Claim";
            params: { index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param {MultiAddressLike} new_
     * @param {number} index
     **/
    transfer: GenericTxCall<
      Rv,
      (
        new_: MultiAddressLike,
        index: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Indices";
          palletCall: {
            name: "Transfer";
            params: { new: MultiAddressLike; index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::free`].
     *
     * @param {number} index
     **/
    free: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Indices";
          palletCall: {
            name: "Free";
            params: { index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {MultiAddressLike} new_
     * @param {number} index
     * @param {boolean} freeze
     **/
    forceTransfer: GenericTxCall<
      Rv,
      (
        new_: MultiAddressLike,
        index: number,
        freeze: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Indices";
          palletCall: {
            name: "ForceTransfer";
            params: { new: MultiAddressLike; index: number; freeze: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::freeze`].
     *
     * @param {number} index
     **/
    freeze: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Indices";
          palletCall: {
            name: "Freeze";
            params: { index: number };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Balances`'s transaction calls
   **/
  balances: {
    /**
     * See [`Pallet::transfer_allow_death`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    transferAllowDeath: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Balances";
          palletCall: {
            name: "TransferAllowDeath";
            params: { dest: MultiAddressLike; value: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    forceTransfer: GenericTxCall<
      Rv,
      (
        source: MultiAddressLike,
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Balances";
          palletCall: {
            name: "ForceTransfer";
            params: {
              source: MultiAddressLike;
              dest: MultiAddressLike;
              value: bigint;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    transferKeepAlive: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Balances";
          palletCall: {
            name: "TransferKeepAlive";
            params: { dest: MultiAddressLike; value: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_all`].
     *
     * @param {MultiAddressLike} dest
     * @param {boolean} keepAlive
     **/
    transferAll: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        keepAlive: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Balances";
          palletCall: {
            name: "TransferAll";
            params: { dest: MultiAddressLike; keepAlive: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_unreserve`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} amount
     **/
    forceUnreserve: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Balances";
          palletCall: {
            name: "ForceUnreserve";
            params: { who: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::upgrade_accounts`].
     *
     * @param {Array<AccountId32Like>} who
     **/
    upgradeAccounts: GenericTxCall<
      Rv,
      (who: Array<AccountId32Like>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Balances";
          palletCall: {
            name: "UpgradeAccounts";
            params: { who: Array<AccountId32Like> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_set_balance`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} newFree
     **/
    forceSetBalance: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        newFree: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Balances";
          palletCall: {
            name: "ForceSetBalance";
            params: { who: MultiAddressLike; newFree: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_adjust_total_issuance`].
     *
     * @param {PalletBalancesAdjustmentDirection} direction
     * @param {bigint} delta
     **/
    forceAdjustTotalIssuance: GenericTxCall<
      Rv,
      (
        direction: PalletBalancesAdjustmentDirection,
        delta: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Balances";
          palletCall: {
            name: "ForceAdjustTotalIssuance";
            params: {
              direction: PalletBalancesAdjustmentDirection;
              delta: bigint;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `ElectionProviderMultiPhase`'s transaction calls
   **/
  electionProviderMultiPhase: {
    /**
     * See [`Pallet::submit_unsigned`].
     *
     * @param {PalletElectionProviderMultiPhaseRawSolution} rawSolution
     * @param {PalletElectionProviderMultiPhaseSolutionOrSnapshotSize} witness
     **/
    submitUnsigned: GenericTxCall<
      Rv,
      (
        rawSolution: PalletElectionProviderMultiPhaseRawSolution,
        witness: PalletElectionProviderMultiPhaseSolutionOrSnapshotSize,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "ElectionProviderMultiPhase";
          palletCall: {
            name: "SubmitUnsigned";
            params: {
              rawSolution: PalletElectionProviderMultiPhaseRawSolution;
              witness: PalletElectionProviderMultiPhaseSolutionOrSnapshotSize;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_minimum_untrusted_score`].
     *
     * @param {SpNposElectionsElectionScore | undefined} maybeNextScore
     **/
    setMinimumUntrustedScore: GenericTxCall<
      Rv,
      (
        maybeNextScore: SpNposElectionsElectionScore | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "ElectionProviderMultiPhase";
          palletCall: {
            name: "SetMinimumUntrustedScore";
            params: {
              maybeNextScore: SpNposElectionsElectionScore | undefined;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_emergency_election_result`].
     *
     * @param {Array<[AccountId32Like, SpNposElectionsSupport]>} supports
     **/
    setEmergencyElectionResult: GenericTxCall<
      Rv,
      (
        supports: Array<[AccountId32Like, SpNposElectionsSupport]>,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "ElectionProviderMultiPhase";
          palletCall: {
            name: "SetEmergencyElectionResult";
            params: {
              supports: Array<[AccountId32Like, SpNposElectionsSupport]>;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::submit`].
     *
     * @param {PalletElectionProviderMultiPhaseRawSolution} rawSolution
     **/
    submit: GenericTxCall<
      Rv,
      (
        rawSolution: PalletElectionProviderMultiPhaseRawSolution,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "ElectionProviderMultiPhase";
          palletCall: {
            name: "Submit";
            params: {
              rawSolution: PalletElectionProviderMultiPhaseRawSolution;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::governance_fallback`].
     *
     * @param {number | undefined} maybeMaxVoters
     * @param {number | undefined} maybeMaxTargets
     **/
    governanceFallback: GenericTxCall<
      Rv,
      (
        maybeMaxVoters: number | undefined,
        maybeMaxTargets: number | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "ElectionProviderMultiPhase";
          palletCall: {
            name: "GovernanceFallback";
            params: {
              maybeMaxVoters: number | undefined;
              maybeMaxTargets: number | undefined;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Staking`'s transaction calls
   **/
  staking: {
    /**
     * See [`Pallet::bond`].
     *
     * @param {bigint} value
     * @param {PalletStakingRewardDestination} payee
     **/
    bond: GenericTxCall<
      Rv,
      (
        value: bigint,
        payee: PalletStakingRewardDestination,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "Bond";
            params: { value: bigint; payee: PalletStakingRewardDestination };
          };
        }
      >
    >;

    /**
     * See [`Pallet::bond_extra`].
     *
     * @param {bigint} maxAdditional
     **/
    bondExtra: GenericTxCall<
      Rv,
      (maxAdditional: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "BondExtra";
            params: { maxAdditional: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::unbond`].
     *
     * @param {bigint} value
     **/
    unbond: GenericTxCall<
      Rv,
      (value: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "Unbond";
            params: { value: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::withdraw_unbonded`].
     *
     * @param {number} numSlashingSpans
     **/
    withdrawUnbonded: GenericTxCall<
      Rv,
      (numSlashingSpans: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "WithdrawUnbonded";
            params: { numSlashingSpans: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::validate`].
     *
     * @param {PalletStakingValidatorPrefs} prefs
     **/
    validate: GenericTxCall<
      Rv,
      (prefs: PalletStakingValidatorPrefs) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "Validate";
            params: { prefs: PalletStakingValidatorPrefs };
          };
        }
      >
    >;

    /**
     * See [`Pallet::nominate`].
     *
     * @param {Array<MultiAddressLike>} targets
     **/
    nominate: GenericTxCall<
      Rv,
      (targets: Array<MultiAddressLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "Nominate";
            params: { targets: Array<MultiAddressLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::chill`].
     *
     **/
    chill: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "Chill";
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_payee`].
     *
     * @param {PalletStakingRewardDestination} payee
     **/
    setPayee: GenericTxCall<
      Rv,
      (payee: PalletStakingRewardDestination) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "SetPayee";
            params: { payee: PalletStakingRewardDestination };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_controller`].
     *
     **/
    setController: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "SetController";
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_validator_count`].
     *
     * @param {number} new_
     **/
    setValidatorCount: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "SetValidatorCount";
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::increase_validator_count`].
     *
     * @param {number} additional
     **/
    increaseValidatorCount: GenericTxCall<
      Rv,
      (additional: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "IncreaseValidatorCount";
            params: { additional: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::scale_validator_count`].
     *
     * @param {Percent} factor
     **/
    scaleValidatorCount: GenericTxCall<
      Rv,
      (factor: Percent) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "ScaleValidatorCount";
            params: { factor: Percent };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_no_eras`].
     *
     **/
    forceNoEras: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "ForceNoEras";
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_new_era`].
     *
     **/
    forceNewEra: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "ForceNewEra";
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_invulnerables`].
     *
     * @param {Array<AccountId32Like>} invulnerables
     **/
    setInvulnerables: GenericTxCall<
      Rv,
      (invulnerables: Array<AccountId32Like>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "SetInvulnerables";
            params: { invulnerables: Array<AccountId32Like> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_unstake`].
     *
     * @param {AccountId32Like} stash
     * @param {number} numSlashingSpans
     **/
    forceUnstake: GenericTxCall<
      Rv,
      (
        stash: AccountId32Like,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "ForceUnstake";
            params: { stash: AccountId32Like; numSlashingSpans: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_new_era_always`].
     *
     **/
    forceNewEraAlways: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "ForceNewEraAlways";
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_deferred_slash`].
     *
     * @param {number} era
     * @param {Array<number>} slashIndices
     **/
    cancelDeferredSlash: GenericTxCall<
      Rv,
      (
        era: number,
        slashIndices: Array<number>,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "CancelDeferredSlash";
            params: { era: number; slashIndices: Array<number> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::payout_stakers`].
     *
     * @param {AccountId32Like} validatorStash
     * @param {number} era
     **/
    payoutStakers: GenericTxCall<
      Rv,
      (
        validatorStash: AccountId32Like,
        era: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "PayoutStakers";
            params: { validatorStash: AccountId32Like; era: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::rebond`].
     *
     * @param {bigint} value
     **/
    rebond: GenericTxCall<
      Rv,
      (value: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "Rebond";
            params: { value: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::reap_stash`].
     *
     * @param {AccountId32Like} stash
     * @param {number} numSlashingSpans
     **/
    reapStash: GenericTxCall<
      Rv,
      (
        stash: AccountId32Like,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "ReapStash";
            params: { stash: AccountId32Like; numSlashingSpans: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::kick`].
     *
     * @param {Array<MultiAddressLike>} who
     **/
    kick: GenericTxCall<
      Rv,
      (who: Array<MultiAddressLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "Kick";
            params: { who: Array<MultiAddressLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_staking_configs`].
     *
     * @param {PalletStakingPalletConfigOp} minNominatorBond
     * @param {PalletStakingPalletConfigOp} minValidatorBond
     * @param {PalletStakingPalletConfigOpU32} maxNominatorCount
     * @param {PalletStakingPalletConfigOpU32} maxValidatorCount
     * @param {PalletStakingPalletConfigOpPercent} chillThreshold
     * @param {PalletStakingPalletConfigOpPerbill} minCommission
     **/
    setStakingConfigs: GenericTxCall<
      Rv,
      (
        minNominatorBond: PalletStakingPalletConfigOp,
        minValidatorBond: PalletStakingPalletConfigOp,
        maxNominatorCount: PalletStakingPalletConfigOpU32,
        maxValidatorCount: PalletStakingPalletConfigOpU32,
        chillThreshold: PalletStakingPalletConfigOpPercent,
        minCommission: PalletStakingPalletConfigOpPerbill,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "SetStakingConfigs";
            params: {
              minNominatorBond: PalletStakingPalletConfigOp;
              minValidatorBond: PalletStakingPalletConfigOp;
              maxNominatorCount: PalletStakingPalletConfigOpU32;
              maxValidatorCount: PalletStakingPalletConfigOpU32;
              chillThreshold: PalletStakingPalletConfigOpPercent;
              minCommission: PalletStakingPalletConfigOpPerbill;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::chill_other`].
     *
     * @param {AccountId32Like} stash
     **/
    chillOther: GenericTxCall<
      Rv,
      (stash: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "ChillOther";
            params: { stash: AccountId32Like };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_apply_min_commission`].
     *
     * @param {AccountId32Like} validatorStash
     **/
    forceApplyMinCommission: GenericTxCall<
      Rv,
      (validatorStash: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "ForceApplyMinCommission";
            params: { validatorStash: AccountId32Like };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_min_commission`].
     *
     * @param {Perbill} new_
     **/
    setMinCommission: GenericTxCall<
      Rv,
      (new_: Perbill) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "SetMinCommission";
            params: { new: Perbill };
          };
        }
      >
    >;

    /**
     * See [`Pallet::payout_stakers_by_page`].
     *
     * @param {AccountId32Like} validatorStash
     * @param {number} era
     * @param {number} page
     **/
    payoutStakersByPage: GenericTxCall<
      Rv,
      (
        validatorStash: AccountId32Like,
        era: number,
        page: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "PayoutStakersByPage";
            params: {
              validatorStash: AccountId32Like;
              era: number;
              page: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::update_payee`].
     *
     * @param {AccountId32Like} controller
     **/
    updatePayee: GenericTxCall<
      Rv,
      (controller: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "UpdatePayee";
            params: { controller: AccountId32Like };
          };
        }
      >
    >;

    /**
     * See [`Pallet::deprecate_controller_batch`].
     *
     * @param {Array<AccountId32Like>} controllers
     **/
    deprecateControllerBatch: GenericTxCall<
      Rv,
      (controllers: Array<AccountId32Like>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Staking";
          palletCall: {
            name: "DeprecateControllerBatch";
            params: { controllers: Array<AccountId32Like> };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Session`'s transaction calls
   **/
  session: {
    /**
     * See [`Pallet::set_keys`].
     *
     * @param {DaRuntimePrimitivesSessionKeys} keys
     * @param {BytesLike} proof
     **/
    setKeys: GenericTxCall<
      Rv,
      (
        keys: DaRuntimePrimitivesSessionKeys,
        proof: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Session";
          palletCall: {
            name: "SetKeys";
            params: { keys: DaRuntimePrimitivesSessionKeys; proof: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::purge_keys`].
     *
     **/
    purgeKeys: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Session";
          palletCall: {
            name: "PurgeKeys";
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `TechnicalCommittee`'s transaction calls
   **/
  technicalCommittee: {
    /**
     * See [`Pallet::set_members`].
     *
     * @param {Array<AccountId32Like>} newMembers
     * @param {AccountId32Like | undefined} prime
     * @param {number} oldCount
     **/
    setMembers: GenericTxCall<
      Rv,
      (
        newMembers: Array<AccountId32Like>,
        prime: AccountId32Like | undefined,
        oldCount: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "TechnicalCommittee";
          palletCall: {
            name: "SetMembers";
            params: {
              newMembers: Array<AccountId32Like>;
              prime: AccountId32Like | undefined;
              oldCount: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::execute`].
     *
     * @param {DaRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    execute: GenericTxCall<
      Rv,
      (
        proposal: DaRuntimeRuntimeCallLike,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "TechnicalCommittee";
          palletCall: {
            name: "Execute";
            params: { proposal: DaRuntimeRuntimeCallLike; lengthBound: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::propose`].
     *
     * @param {number} threshold
     * @param {DaRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    propose: GenericTxCall<
      Rv,
      (
        threshold: number,
        proposal: DaRuntimeRuntimeCallLike,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "TechnicalCommittee";
          palletCall: {
            name: "Propose";
            params: {
              threshold: number;
              proposal: DaRuntimeRuntimeCallLike;
              lengthBound: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::vote`].
     *
     * @param {H256} proposal
     * @param {number} index
     * @param {boolean} approve
     **/
    vote: GenericTxCall<
      Rv,
      (
        proposal: H256,
        index: number,
        approve: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "TechnicalCommittee";
          palletCall: {
            name: "Vote";
            params: { proposal: H256; index: number; approve: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::disapprove_proposal`].
     *
     * @param {H256} proposalHash
     **/
    disapproveProposal: GenericTxCall<
      Rv,
      (proposalHash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "TechnicalCommittee";
          palletCall: {
            name: "DisapproveProposal";
            params: { proposalHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::close`].
     *
     * @param {H256} proposalHash
     * @param {number} index
     * @param {SpWeightsWeightV2Weight} proposalWeightBound
     * @param {number} lengthBound
     **/
    close: GenericTxCall<
      Rv,
      (
        proposalHash: H256,
        index: number,
        proposalWeightBound: SpWeightsWeightV2Weight,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "TechnicalCommittee";
          palletCall: {
            name: "Close";
            params: {
              proposalHash: H256;
              index: number;
              proposalWeightBound: SpWeightsWeightV2Weight;
              lengthBound: number;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Grandpa`'s transaction calls
   **/
  grandpa: {
    /**
     * See [`Pallet::report_equivocation`].
     *
     * @param {SpConsensusGrandpaEquivocationProof} equivocationProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportEquivocation: GenericTxCall<
      Rv,
      (
        equivocationProof: SpConsensusGrandpaEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Grandpa";
          palletCall: {
            name: "ReportEquivocation";
            params: {
              equivocationProof: SpConsensusGrandpaEquivocationProof;
              keyOwnerProof: SpSessionMembershipProof;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::report_equivocation_unsigned`].
     *
     * @param {SpConsensusGrandpaEquivocationProof} equivocationProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportEquivocationUnsigned: GenericTxCall<
      Rv,
      (
        equivocationProof: SpConsensusGrandpaEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Grandpa";
          palletCall: {
            name: "ReportEquivocationUnsigned";
            params: {
              equivocationProof: SpConsensusGrandpaEquivocationProof;
              keyOwnerProof: SpSessionMembershipProof;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::note_stalled`].
     *
     * @param {number} delay
     * @param {number} bestFinalizedBlockNumber
     **/
    noteStalled: GenericTxCall<
      Rv,
      (
        delay: number,
        bestFinalizedBlockNumber: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Grandpa";
          palletCall: {
            name: "NoteStalled";
            params: { delay: number; bestFinalizedBlockNumber: number };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Treasury`'s transaction calls
   **/
  treasury: {
    /**
     * See [`Pallet::propose_spend`].
     *
     * @param {bigint} value
     * @param {MultiAddressLike} beneficiary
     **/
    proposeSpend: GenericTxCall<
      Rv,
      (
        value: bigint,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Treasury";
          palletCall: {
            name: "ProposeSpend";
            params: { value: bigint; beneficiary: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::reject_proposal`].
     *
     * @param {number} proposalId
     **/
    rejectProposal: GenericTxCall<
      Rv,
      (proposalId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Treasury";
          palletCall: {
            name: "RejectProposal";
            params: { proposalId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::approve_proposal`].
     *
     * @param {number} proposalId
     **/
    approveProposal: GenericTxCall<
      Rv,
      (proposalId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Treasury";
          palletCall: {
            name: "ApproveProposal";
            params: { proposalId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::spend_local`].
     *
     * @param {bigint} amount
     * @param {MultiAddressLike} beneficiary
     **/
    spendLocal: GenericTxCall<
      Rv,
      (
        amount: bigint,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Treasury";
          palletCall: {
            name: "SpendLocal";
            params: { amount: bigint; beneficiary: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_approval`].
     *
     * @param {number} proposalId
     **/
    removeApproval: GenericTxCall<
      Rv,
      (proposalId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Treasury";
          palletCall: {
            name: "RemoveApproval";
            params: { proposalId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::spend`].
     *
     * @param {[]} assetKind
     * @param {bigint} amount
     * @param {AccountId32Like} beneficiary
     * @param {number | undefined} validFrom
     **/
    spend: GenericTxCall<
      Rv,
      (
        assetKind: [],
        amount: bigint,
        beneficiary: AccountId32Like,
        validFrom: number | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Treasury";
          palletCall: {
            name: "Spend";
            params: {
              assetKind: [];
              amount: bigint;
              beneficiary: AccountId32Like;
              validFrom: number | undefined;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::payout`].
     *
     * @param {number} index
     **/
    payout: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Treasury";
          palletCall: {
            name: "Payout";
            params: { index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::check_status`].
     *
     * @param {number} index
     **/
    checkStatus: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Treasury";
          palletCall: {
            name: "CheckStatus";
            params: { index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::void_spend`].
     *
     * @param {number} index
     **/
    voidSpend: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Treasury";
          palletCall: {
            name: "VoidSpend";
            params: { index: number };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Sudo`'s transaction calls
   **/
  sudo: {
    /**
     * See [`Pallet::sudo`].
     *
     * @param {DaRuntimeRuntimeCallLike} call
     **/
    sudo: GenericTxCall<
      Rv,
      (call: DaRuntimeRuntimeCallLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Sudo";
          palletCall: {
            name: "Sudo";
            params: { call: DaRuntimeRuntimeCallLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::sudo_unchecked_weight`].
     *
     * @param {DaRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} weight
     **/
    sudoUncheckedWeight: GenericTxCall<
      Rv,
      (
        call: DaRuntimeRuntimeCallLike,
        weight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Sudo";
          palletCall: {
            name: "SudoUncheckedWeight";
            params: {
              call: DaRuntimeRuntimeCallLike;
              weight: SpWeightsWeightV2Weight;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_key`].
     *
     * @param {MultiAddressLike} new_
     **/
    setKey: GenericTxCall<
      Rv,
      (new_: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Sudo";
          palletCall: {
            name: "SetKey";
            params: { new: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::sudo_as`].
     *
     * @param {MultiAddressLike} who
     * @param {DaRuntimeRuntimeCallLike} call
     **/
    sudoAs: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        call: DaRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Sudo";
          palletCall: {
            name: "SudoAs";
            params: { who: MultiAddressLike; call: DaRuntimeRuntimeCallLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_key`].
     *
     **/
    removeKey: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Sudo";
          palletCall: {
            name: "RemoveKey";
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `ImOnline`'s transaction calls
   **/
  imOnline: {
    /**
     * See [`Pallet::heartbeat`].
     *
     * @param {PalletImOnlineHeartbeat} heartbeat
     * @param {PalletImOnlineSr25519AppSr25519Signature} signature
     **/
    heartbeat: GenericTxCall<
      Rv,
      (
        heartbeat: PalletImOnlineHeartbeat,
        signature: PalletImOnlineSr25519AppSr25519Signature,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "ImOnline";
          palletCall: {
            name: "Heartbeat";
            params: {
              heartbeat: PalletImOnlineHeartbeat;
              signature: PalletImOnlineSr25519AppSr25519Signature;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Scheduler`'s transaction calls
   **/
  scheduler: {
    /**
     * See [`Pallet::schedule`].
     *
     * @param {number} when
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {DaRuntimeRuntimeCallLike} call
     **/
    schedule: GenericTxCall<
      Rv,
      (
        when: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: DaRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Scheduler";
          palletCall: {
            name: "Schedule";
            params: {
              when: number;
              maybePeriodic: [number, number] | undefined;
              priority: number;
              call: DaRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel`].
     *
     * @param {number} when
     * @param {number} index
     **/
    cancel: GenericTxCall<
      Rv,
      (
        when: number,
        index: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Scheduler";
          palletCall: {
            name: "Cancel";
            params: { when: number; index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::schedule_named`].
     *
     * @param {FixedBytes<32>} id
     * @param {number} when
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {DaRuntimeRuntimeCallLike} call
     **/
    scheduleNamed: GenericTxCall<
      Rv,
      (
        id: FixedBytes<32>,
        when: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: DaRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Scheduler";
          palletCall: {
            name: "ScheduleNamed";
            params: {
              id: FixedBytes<32>;
              when: number;
              maybePeriodic: [number, number] | undefined;
              priority: number;
              call: DaRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_named`].
     *
     * @param {FixedBytes<32>} id
     **/
    cancelNamed: GenericTxCall<
      Rv,
      (id: FixedBytes<32>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Scheduler";
          palletCall: {
            name: "CancelNamed";
            params: { id: FixedBytes<32> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::schedule_after`].
     *
     * @param {number} after
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {DaRuntimeRuntimeCallLike} call
     **/
    scheduleAfter: GenericTxCall<
      Rv,
      (
        after: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: DaRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Scheduler";
          palletCall: {
            name: "ScheduleAfter";
            params: {
              after: number;
              maybePeriodic: [number, number] | undefined;
              priority: number;
              call: DaRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::schedule_named_after`].
     *
     * @param {FixedBytes<32>} id
     * @param {number} after
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {DaRuntimeRuntimeCallLike} call
     **/
    scheduleNamedAfter: GenericTxCall<
      Rv,
      (
        id: FixedBytes<32>,
        after: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: DaRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Scheduler";
          palletCall: {
            name: "ScheduleNamedAfter";
            params: {
              id: FixedBytes<32>;
              after: number;
              maybePeriodic: [number, number] | undefined;
              priority: number;
              call: DaRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `DataAvailability`'s transaction calls
   **/
  dataAvailability: {
    /**
     * See [`Pallet::create_application_key`].
     *
     * @param {BytesLike} key
     **/
    createApplicationKey: GenericTxCall<
      Rv,
      (key: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "DataAvailability";
          palletCall: {
            name: "CreateApplicationKey";
            params: { key: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::submit_data`].
     *
     * @param {BytesLike} data
     **/
    submitData: GenericTxCall<
      Rv,
      (data: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "DataAvailability";
          palletCall: {
            name: "SubmitData";
            params: { data: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::submit_block_length_proposal`].
     *
     * @param {number} rows
     * @param {number} cols
     **/
    submitBlockLengthProposal: GenericTxCall<
      Rv,
      (
        rows: number,
        cols: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "DataAvailability";
          palletCall: {
            name: "SubmitBlockLengthProposal";
            params: { rows: number; cols: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_application_key`].
     *
     * @param {BytesLike} oldKey
     * @param {BytesLike} newKey
     **/
    setApplicationKey: GenericTxCall<
      Rv,
      (
        oldKey: BytesLike,
        newKey: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "DataAvailability";
          palletCall: {
            name: "SetApplicationKey";
            params: { oldKey: BytesLike; newKey: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_submit_data_fee_modifier`].
     *
     * @param {FrameSupportDispatchDispatchFeeModifier} modifier
     **/
    setSubmitDataFeeModifier: GenericTxCall<
      Rv,
      (
        modifier: FrameSupportDispatchDispatchFeeModifier,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "DataAvailability";
          palletCall: {
            name: "SetSubmitDataFeeModifier";
            params: { modifier: FrameSupportDispatchDispatchFeeModifier };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Preimage`'s transaction calls
   **/
  preimage: {
    /**
     * See [`Pallet::note_preimage`].
     *
     * @param {BytesLike} bytes
     **/
    notePreimage: GenericTxCall<
      Rv,
      (bytes: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Preimage";
          palletCall: {
            name: "NotePreimage";
            params: { bytes: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::unnote_preimage`].
     *
     * @param {H256} hash
     **/
    unnotePreimage: GenericTxCall<
      Rv,
      (hash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Preimage";
          palletCall: {
            name: "UnnotePreimage";
            params: { hash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::request_preimage`].
     *
     * @param {H256} hash
     **/
    requestPreimage: GenericTxCall<
      Rv,
      (hash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Preimage";
          palletCall: {
            name: "RequestPreimage";
            params: { hash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::unrequest_preimage`].
     *
     * @param {H256} hash
     **/
    unrequestPreimage: GenericTxCall<
      Rv,
      (hash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Preimage";
          palletCall: {
            name: "UnrequestPreimage";
            params: { hash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::ensure_updated`].
     *
     * @param {Array<H256>} hashes
     **/
    ensureUpdated: GenericTxCall<
      Rv,
      (hashes: Array<H256>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Preimage";
          palletCall: {
            name: "EnsureUpdated";
            params: { hashes: Array<H256> };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Multisig`'s transaction calls
   **/
  multisig: {
    /**
     * See [`Pallet::as_multi_threshold_1`].
     *
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {DaRuntimeRuntimeCallLike} call
     **/
    asMultiThreshold1: GenericTxCall<
      Rv,
      (
        otherSignatories: Array<AccountId32Like>,
        call: DaRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Multisig";
          palletCall: {
            name: "AsMultiThreshold1";
            params: {
              otherSignatories: Array<AccountId32Like>;
              call: DaRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint | undefined} maybeTimepoint
     * @param {DaRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    asMulti: GenericTxCall<
      Rv,
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        call: DaRuntimeRuntimeCallLike,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Multisig";
          palletCall: {
            name: "AsMulti";
            params: {
              threshold: number;
              otherSignatories: Array<AccountId32Like>;
              maybeTimepoint: PalletMultisigTimepoint | undefined;
              call: DaRuntimeRuntimeCallLike;
              maxWeight: SpWeightsWeightV2Weight;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::approve_as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint | undefined} maybeTimepoint
     * @param {FixedBytes<32>} callHash
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    approveAsMulti: GenericTxCall<
      Rv,
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        callHash: FixedBytes<32>,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Multisig";
          palletCall: {
            name: "ApproveAsMulti";
            params: {
              threshold: number;
              otherSignatories: Array<AccountId32Like>;
              maybeTimepoint: PalletMultisigTimepoint | undefined;
              callHash: FixedBytes<32>;
              maxWeight: SpWeightsWeightV2Weight;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint} timepoint
     * @param {FixedBytes<32>} callHash
     **/
    cancelAsMulti: GenericTxCall<
      Rv,
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        timepoint: PalletMultisigTimepoint,
        callHash: FixedBytes<32>,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Multisig";
          palletCall: {
            name: "CancelAsMulti";
            params: {
              threshold: number;
              otherSignatories: Array<AccountId32Like>;
              timepoint: PalletMultisigTimepoint;
              callHash: FixedBytes<32>;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `VoterList`'s transaction calls
   **/
  voterList: {
    /**
     * See [`Pallet::rebag`].
     *
     * @param {MultiAddressLike} dislocated
     **/
    rebag: GenericTxCall<
      Rv,
      (dislocated: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "VoterList";
          palletCall: {
            name: "Rebag";
            params: { dislocated: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::put_in_front_of`].
     *
     * @param {MultiAddressLike} lighter
     **/
    putInFrontOf: GenericTxCall<
      Rv,
      (lighter: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "VoterList";
          palletCall: {
            name: "PutInFrontOf";
            params: { lighter: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::put_in_front_of_other`].
     *
     * @param {MultiAddressLike} heavier
     * @param {MultiAddressLike} lighter
     **/
    putInFrontOfOther: GenericTxCall<
      Rv,
      (
        heavier: MultiAddressLike,
        lighter: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "VoterList";
          palletCall: {
            name: "PutInFrontOfOther";
            params: { heavier: MultiAddressLike; lighter: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `NominationPools`'s transaction calls
   **/
  nominationPools: {
    /**
     * See [`Pallet::join`].
     *
     * @param {bigint} amount
     * @param {number} poolId
     **/
    join: GenericTxCall<
      Rv,
      (
        amount: bigint,
        poolId: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "Join";
            params: { amount: bigint; poolId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::bond_extra`].
     *
     * @param {PalletNominationPoolsBondExtra} extra
     **/
    bondExtra: GenericTxCall<
      Rv,
      (extra: PalletNominationPoolsBondExtra) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "BondExtra";
            params: { extra: PalletNominationPoolsBondExtra };
          };
        }
      >
    >;

    /**
     * See [`Pallet::claim_payout`].
     *
     **/
    claimPayout: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "ClaimPayout";
          };
        }
      >
    >;

    /**
     * See [`Pallet::unbond`].
     *
     * @param {MultiAddressLike} memberAccount
     * @param {bigint} unbondingPoints
     **/
    unbond: GenericTxCall<
      Rv,
      (
        memberAccount: MultiAddressLike,
        unbondingPoints: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "Unbond";
            params: {
              memberAccount: MultiAddressLike;
              unbondingPoints: bigint;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::pool_withdraw_unbonded`].
     *
     * @param {number} poolId
     * @param {number} numSlashingSpans
     **/
    poolWithdrawUnbonded: GenericTxCall<
      Rv,
      (
        poolId: number,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "PoolWithdrawUnbonded";
            params: { poolId: number; numSlashingSpans: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::withdraw_unbonded`].
     *
     * @param {MultiAddressLike} memberAccount
     * @param {number} numSlashingSpans
     **/
    withdrawUnbonded: GenericTxCall<
      Rv,
      (
        memberAccount: MultiAddressLike,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "WithdrawUnbonded";
            params: {
              memberAccount: MultiAddressLike;
              numSlashingSpans: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::create`].
     *
     * @param {bigint} amount
     * @param {MultiAddressLike} root
     * @param {MultiAddressLike} nominator
     * @param {MultiAddressLike} bouncer
     **/
    create: GenericTxCall<
      Rv,
      (
        amount: bigint,
        root: MultiAddressLike,
        nominator: MultiAddressLike,
        bouncer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "Create";
            params: {
              amount: bigint;
              root: MultiAddressLike;
              nominator: MultiAddressLike;
              bouncer: MultiAddressLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::create_with_pool_id`].
     *
     * @param {bigint} amount
     * @param {MultiAddressLike} root
     * @param {MultiAddressLike} nominator
     * @param {MultiAddressLike} bouncer
     * @param {number} poolId
     **/
    createWithPoolId: GenericTxCall<
      Rv,
      (
        amount: bigint,
        root: MultiAddressLike,
        nominator: MultiAddressLike,
        bouncer: MultiAddressLike,
        poolId: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "CreateWithPoolId";
            params: {
              amount: bigint;
              root: MultiAddressLike;
              nominator: MultiAddressLike;
              bouncer: MultiAddressLike;
              poolId: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::nominate`].
     *
     * @param {number} poolId
     * @param {Array<AccountId32Like>} validators
     **/
    nominate: GenericTxCall<
      Rv,
      (
        poolId: number,
        validators: Array<AccountId32Like>,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "Nominate";
            params: { poolId: number; validators: Array<AccountId32Like> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_state`].
     *
     * @param {number} poolId
     * @param {PalletNominationPoolsPoolState} state
     **/
    setState: GenericTxCall<
      Rv,
      (
        poolId: number,
        state: PalletNominationPoolsPoolState,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "SetState";
            params: { poolId: number; state: PalletNominationPoolsPoolState };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {number} poolId
     * @param {BytesLike} metadata
     **/
    setMetadata: GenericTxCall<
      Rv,
      (
        poolId: number,
        metadata: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "SetMetadata";
            params: { poolId: number; metadata: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_configs`].
     *
     * @param {PalletNominationPoolsConfigOp} minJoinBond
     * @param {PalletNominationPoolsConfigOp} minCreateBond
     * @param {PalletNominationPoolsConfigOpU32} maxPools
     * @param {PalletNominationPoolsConfigOpU32} maxMembers
     * @param {PalletNominationPoolsConfigOpU32} maxMembersPerPool
     * @param {PalletNominationPoolsConfigOpPerbill} globalMaxCommission
     **/
    setConfigs: GenericTxCall<
      Rv,
      (
        minJoinBond: PalletNominationPoolsConfigOp,
        minCreateBond: PalletNominationPoolsConfigOp,
        maxPools: PalletNominationPoolsConfigOpU32,
        maxMembers: PalletNominationPoolsConfigOpU32,
        maxMembersPerPool: PalletNominationPoolsConfigOpU32,
        globalMaxCommission: PalletNominationPoolsConfigOpPerbill,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "SetConfigs";
            params: {
              minJoinBond: PalletNominationPoolsConfigOp;
              minCreateBond: PalletNominationPoolsConfigOp;
              maxPools: PalletNominationPoolsConfigOpU32;
              maxMembers: PalletNominationPoolsConfigOpU32;
              maxMembersPerPool: PalletNominationPoolsConfigOpU32;
              globalMaxCommission: PalletNominationPoolsConfigOpPerbill;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::update_roles`].
     *
     * @param {number} poolId
     * @param {PalletNominationPoolsConfigOp004} newRoot
     * @param {PalletNominationPoolsConfigOp004} newNominator
     * @param {PalletNominationPoolsConfigOp004} newBouncer
     **/
    updateRoles: GenericTxCall<
      Rv,
      (
        poolId: number,
        newRoot: PalletNominationPoolsConfigOp004,
        newNominator: PalletNominationPoolsConfigOp004,
        newBouncer: PalletNominationPoolsConfigOp004,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "UpdateRoles";
            params: {
              poolId: number;
              newRoot: PalletNominationPoolsConfigOp004;
              newNominator: PalletNominationPoolsConfigOp004;
              newBouncer: PalletNominationPoolsConfigOp004;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::chill`].
     *
     * @param {number} poolId
     **/
    chill: GenericTxCall<
      Rv,
      (poolId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "Chill";
            params: { poolId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::bond_extra_other`].
     *
     * @param {MultiAddressLike} member
     * @param {PalletNominationPoolsBondExtra} extra
     **/
    bondExtraOther: GenericTxCall<
      Rv,
      (
        member: MultiAddressLike,
        extra: PalletNominationPoolsBondExtra,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "BondExtraOther";
            params: {
              member: MultiAddressLike;
              extra: PalletNominationPoolsBondExtra;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_claim_permission`].
     *
     * @param {PalletNominationPoolsClaimPermission} permission
     **/
    setClaimPermission: GenericTxCall<
      Rv,
      (
        permission: PalletNominationPoolsClaimPermission,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "SetClaimPermission";
            params: { permission: PalletNominationPoolsClaimPermission };
          };
        }
      >
    >;

    /**
     * See [`Pallet::claim_payout_other`].
     *
     * @param {AccountId32Like} other
     **/
    claimPayoutOther: GenericTxCall<
      Rv,
      (other: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "ClaimPayoutOther";
            params: { other: AccountId32Like };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_commission`].
     *
     * @param {number} poolId
     * @param {[Perbill, AccountId32Like] | undefined} newCommission
     **/
    setCommission: GenericTxCall<
      Rv,
      (
        poolId: number,
        newCommission: [Perbill, AccountId32Like] | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "SetCommission";
            params: {
              poolId: number;
              newCommission: [Perbill, AccountId32Like] | undefined;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_commission_max`].
     *
     * @param {number} poolId
     * @param {Perbill} maxCommission
     **/
    setCommissionMax: GenericTxCall<
      Rv,
      (
        poolId: number,
        maxCommission: Perbill,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "SetCommissionMax";
            params: { poolId: number; maxCommission: Perbill };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_commission_change_rate`].
     *
     * @param {number} poolId
     * @param {PalletNominationPoolsCommissionChangeRate} changeRate
     **/
    setCommissionChangeRate: GenericTxCall<
      Rv,
      (
        poolId: number,
        changeRate: PalletNominationPoolsCommissionChangeRate,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "SetCommissionChangeRate";
            params: {
              poolId: number;
              changeRate: PalletNominationPoolsCommissionChangeRate;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::claim_commission`].
     *
     * @param {number} poolId
     **/
    claimCommission: GenericTxCall<
      Rv,
      (poolId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "ClaimCommission";
            params: { poolId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::adjust_pool_deposit`].
     *
     * @param {number} poolId
     **/
    adjustPoolDeposit: GenericTxCall<
      Rv,
      (poolId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "AdjustPoolDeposit";
            params: { poolId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_commission_claim_permission`].
     *
     * @param {number} poolId
     * @param {PalletNominationPoolsCommissionClaimPermission | undefined} permission
     **/
    setCommissionClaimPermission: GenericTxCall<
      Rv,
      (
        poolId: number,
        permission: PalletNominationPoolsCommissionClaimPermission | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "NominationPools";
          palletCall: {
            name: "SetCommissionClaimPermission";
            params: {
              poolId: number;
              permission:
                | PalletNominationPoolsCommissionClaimPermission
                | undefined;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Identity`'s transaction calls
   **/
  identity: {
    /**
     * See [`Pallet::add_registrar`].
     *
     * @param {MultiAddressLike} account
     **/
    addRegistrar: GenericTxCall<
      Rv,
      (account: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "AddRegistrar";
            params: { account: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_identity`].
     *
     * @param {PalletIdentityLegacyIdentityInfo} info
     **/
    setIdentity: GenericTxCall<
      Rv,
      (info: PalletIdentityLegacyIdentityInfo) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "SetIdentity";
            params: { info: PalletIdentityLegacyIdentityInfo };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_subs`].
     *
     * @param {Array<[AccountId32Like, Data]>} subs
     **/
    setSubs: GenericTxCall<
      Rv,
      (subs: Array<[AccountId32Like, Data]>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "SetSubs";
            params: { subs: Array<[AccountId32Like, Data]> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::clear_identity`].
     *
     **/
    clearIdentity: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "ClearIdentity";
          };
        }
      >
    >;

    /**
     * See [`Pallet::request_judgement`].
     *
     * @param {number} regIndex
     * @param {bigint} maxFee
     **/
    requestJudgement: GenericTxCall<
      Rv,
      (
        regIndex: number,
        maxFee: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "RequestJudgement";
            params: { regIndex: number; maxFee: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_request`].
     *
     * @param {number} regIndex
     **/
    cancelRequest: GenericTxCall<
      Rv,
      (regIndex: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "CancelRequest";
            params: { regIndex: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_fee`].
     *
     * @param {number} index
     * @param {bigint} fee
     **/
    setFee: GenericTxCall<
      Rv,
      (
        index: number,
        fee: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "SetFee";
            params: { index: number; fee: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_account_id`].
     *
     * @param {number} index
     * @param {MultiAddressLike} new_
     **/
    setAccountId: GenericTxCall<
      Rv,
      (
        index: number,
        new_: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "SetAccountId";
            params: { index: number; new: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_fields`].
     *
     * @param {number} index
     * @param {bigint} fields
     **/
    setFields: GenericTxCall<
      Rv,
      (
        index: number,
        fields: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "SetFields";
            params: { index: number; fields: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::provide_judgement`].
     *
     * @param {number} regIndex
     * @param {MultiAddressLike} target
     * @param {PalletIdentityJudgement} judgement
     * @param {H256} identity
     **/
    provideJudgement: GenericTxCall<
      Rv,
      (
        regIndex: number,
        target: MultiAddressLike,
        judgement: PalletIdentityJudgement,
        identity: H256,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "ProvideJudgement";
            params: {
              regIndex: number;
              target: MultiAddressLike;
              judgement: PalletIdentityJudgement;
              identity: H256;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::kill_identity`].
     *
     * @param {MultiAddressLike} target
     **/
    killIdentity: GenericTxCall<
      Rv,
      (target: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "KillIdentity";
            params: { target: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::add_sub`].
     *
     * @param {MultiAddressLike} sub
     * @param {Data} data
     **/
    addSub: GenericTxCall<
      Rv,
      (
        sub: MultiAddressLike,
        data: Data,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "AddSub";
            params: { sub: MultiAddressLike; data: Data };
          };
        }
      >
    >;

    /**
     * See [`Pallet::rename_sub`].
     *
     * @param {MultiAddressLike} sub
     * @param {Data} data
     **/
    renameSub: GenericTxCall<
      Rv,
      (
        sub: MultiAddressLike,
        data: Data,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "RenameSub";
            params: { sub: MultiAddressLike; data: Data };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_sub`].
     *
     * @param {MultiAddressLike} sub
     **/
    removeSub: GenericTxCall<
      Rv,
      (sub: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "RemoveSub";
            params: { sub: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::quit_sub`].
     *
     **/
    quitSub: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "QuitSub";
          };
        }
      >
    >;

    /**
     * See [`Pallet::add_username_authority`].
     *
     * @param {MultiAddressLike} authority
     * @param {BytesLike} suffix
     * @param {number} allocation
     **/
    addUsernameAuthority: GenericTxCall<
      Rv,
      (
        authority: MultiAddressLike,
        suffix: BytesLike,
        allocation: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "AddUsernameAuthority";
            params: {
              authority: MultiAddressLike;
              suffix: BytesLike;
              allocation: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_username_authority`].
     *
     * @param {MultiAddressLike} authority
     **/
    removeUsernameAuthority: GenericTxCall<
      Rv,
      (authority: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "RemoveUsernameAuthority";
            params: { authority: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_username_for`].
     *
     * @param {MultiAddressLike} who
     * @param {BytesLike} username
     * @param {SpRuntimeMultiSignature | undefined} signature
     **/
    setUsernameFor: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        username: BytesLike,
        signature: SpRuntimeMultiSignature | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "SetUsernameFor";
            params: {
              who: MultiAddressLike;
              username: BytesLike;
              signature: SpRuntimeMultiSignature | undefined;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::accept_username`].
     *
     * @param {BytesLike} username
     **/
    acceptUsername: GenericTxCall<
      Rv,
      (username: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "AcceptUsername";
            params: { username: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_expired_approval`].
     *
     * @param {BytesLike} username
     **/
    removeExpiredApproval: GenericTxCall<
      Rv,
      (username: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "RemoveExpiredApproval";
            params: { username: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_primary_username`].
     *
     * @param {BytesLike} username
     **/
    setPrimaryUsername: GenericTxCall<
      Rv,
      (username: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "SetPrimaryUsername";
            params: { username: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_dangling_username`].
     *
     * @param {BytesLike} username
     **/
    removeDanglingUsername: GenericTxCall<
      Rv,
      (username: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Identity";
          palletCall: {
            name: "RemoveDanglingUsername";
            params: { username: BytesLike };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Mandate`'s transaction calls
   **/
  mandate: {
    /**
     * See [`Pallet::mandate`].
     *
     * @param {DaRuntimeRuntimeCallLike} call
     **/
    mandate: GenericTxCall<
      Rv,
      (call: DaRuntimeRuntimeCallLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Mandate";
          palletCall: {
            name: "Mandate";
            params: { call: DaRuntimeRuntimeCallLike };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Vector`'s transaction calls
   **/
  vector: {
    /**
     * See [`Pallet::fulfill_call`].
     *
     * @param {H256} functionId
     * @param {BytesLike} input
     * @param {BytesLike} output
     * @param {BytesLike} proof
     * @param {bigint} slot
     **/
    fulfillCall: GenericTxCall<
      Rv,
      (
        functionId: H256,
        input: BytesLike,
        output: BytesLike,
        proof: BytesLike,
        slot: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Vector";
          palletCall: {
            name: "FulfillCall";
            params: {
              functionId: H256;
              input: BytesLike;
              output: BytesLike;
              proof: BytesLike;
              slot: bigint;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::execute`].
     *
     * @param {bigint} slot
     * @param {AvailCoreDataProofMessageAddressedMessage} addrMessage
     * @param {Array<BytesLike>} accountProof
     * @param {Array<BytesLike>} storageProof
     **/
    execute: GenericTxCall<
      Rv,
      (
        slot: bigint,
        addrMessage: AvailCoreDataProofMessageAddressedMessage,
        accountProof: Array<BytesLike>,
        storageProof: Array<BytesLike>,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Vector";
          palletCall: {
            name: "Execute";
            params: {
              slot: bigint;
              addrMessage: AvailCoreDataProofMessageAddressedMessage;
              accountProof: Array<BytesLike>;
              storageProof: Array<BytesLike>;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::source_chain_froze`].
     *
     * @param {number} sourceChainId
     * @param {boolean} frozen
     **/
    sourceChainFroze: GenericTxCall<
      Rv,
      (
        sourceChainId: number,
        frozen: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Vector";
          palletCall: {
            name: "SourceChainFroze";
            params: { sourceChainId: number; frozen: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::send_message`].
     *
     * @param {AvailCoreDataProofMessage} message
     * @param {H256} to
     * @param {number} domain
     **/
    sendMessage: GenericTxCall<
      Rv,
      (
        message: AvailCoreDataProofMessage,
        to: H256,
        domain: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Vector";
          palletCall: {
            name: "SendMessage";
            params: {
              message: AvailCoreDataProofMessage;
              to: H256;
              domain: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_poseidon_hash`].
     *
     * @param {bigint} period
     * @param {BytesLike} poseidonHash
     **/
    setPoseidonHash: GenericTxCall<
      Rv,
      (
        period: bigint,
        poseidonHash: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Vector";
          palletCall: {
            name: "SetPoseidonHash";
            params: { period: bigint; poseidonHash: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_broadcaster`].
     *
     * @param {number} broadcasterDomain
     * @param {H256} broadcaster
     **/
    setBroadcaster: GenericTxCall<
      Rv,
      (
        broadcasterDomain: number,
        broadcaster: H256,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Vector";
          palletCall: {
            name: "SetBroadcaster";
            params: { broadcasterDomain: number; broadcaster: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_whitelisted_domains`].
     *
     * @param {Array<number>} value
     **/
    setWhitelistedDomains: GenericTxCall<
      Rv,
      (value: Array<number>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Vector";
          palletCall: {
            name: "SetWhitelistedDomains";
            params: { value: Array<number> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_configuration`].
     *
     * @param {PalletVectorStateConfiguration} value
     **/
    setConfiguration: GenericTxCall<
      Rv,
      (value: PalletVectorStateConfiguration) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Vector";
          palletCall: {
            name: "SetConfiguration";
            params: { value: PalletVectorStateConfiguration };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_function_ids`].
     *
     * @param {[H256, H256] | undefined} value
     **/
    setFunctionIds: GenericTxCall<
      Rv,
      (value: [H256, H256] | undefined) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Vector";
          palletCall: {
            name: "SetFunctionIds";
            params: { value: [H256, H256] | undefined };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_step_verification_key`].
     *
     * @param {BytesLike | undefined} value
     **/
    setStepVerificationKey: GenericTxCall<
      Rv,
      (value: BytesLike | undefined) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Vector";
          palletCall: {
            name: "SetStepVerificationKey";
            params: { value: BytesLike | undefined };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_rotate_verification_key`].
     *
     * @param {BytesLike | undefined} value
     **/
    setRotateVerificationKey: GenericTxCall<
      Rv,
      (value: BytesLike | undefined) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Vector";
          palletCall: {
            name: "SetRotateVerificationKey";
            params: { value: BytesLike | undefined };
          };
        }
      >
    >;

    /**
     * See [`Pallet::failed_send_message_txs`].
     *
     * @param {Array<number>} failedTxs
     **/
    failedSendMessageTxs: GenericTxCall<
      Rv,
      (failedTxs: Array<number>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Vector";
          palletCall: {
            name: "FailedSendMessageTxs";
            params: { failedTxs: Array<number> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_updater`].
     *
     * @param {H256} updater
     **/
    setUpdater: GenericTxCall<
      Rv,
      (updater: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Vector";
          palletCall: {
            name: "SetUpdater";
            params: { updater: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::fulfill`].
     *
     * @param {BytesLike} proof
     * @param {BytesLike} publicValues
     **/
    fulfill: GenericTxCall<
      Rv,
      (
        proof: BytesLike,
        publicValues: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Vector";
          palletCall: {
            name: "Fulfill";
            params: { proof: BytesLike; publicValues: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_sp1_verification_key`].
     *
     * @param {H256} sp1Vk
     **/
    setSp1VerificationKey: GenericTxCall<
      Rv,
      (sp1Vk: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Vector";
          palletCall: {
            name: "SetSp1VerificationKey";
            params: { sp1Vk: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_sync_committee_hash`].
     *
     * @param {bigint} period
     * @param {H256} hash
     **/
    setSyncCommitteeHash: GenericTxCall<
      Rv,
      (
        period: bigint,
        hash: H256,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Vector";
          palletCall: {
            name: "SetSyncCommitteeHash";
            params: { period: bigint; hash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::enable_mock`].
     *
     * @param {boolean} value
     **/
    enableMock: GenericTxCall<
      Rv,
      (value: boolean) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Vector";
          palletCall: {
            name: "EnableMock";
            params: { value: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::mock_fulfill`].
     *
     * @param {BytesLike} publicValues
     **/
    mockFulfill: GenericTxCall<
      Rv,
      (publicValues: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Vector";
          palletCall: {
            name: "MockFulfill";
            params: { publicValues: BytesLike };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Proxy`'s transaction calls
   **/
  proxy: {
    /**
     * See [`Pallet::proxy`].
     *
     * @param {MultiAddressLike} real
     * @param {DaRuntimeImplsProxyType | undefined} forceProxyType
     * @param {DaRuntimeRuntimeCallLike} call
     **/
    proxy: GenericTxCall<
      Rv,
      (
        real: MultiAddressLike,
        forceProxyType: DaRuntimeImplsProxyType | undefined,
        call: DaRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Proxy";
          palletCall: {
            name: "Proxy";
            params: {
              real: MultiAddressLike;
              forceProxyType: DaRuntimeImplsProxyType | undefined;
              call: DaRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::add_proxy`].
     *
     * @param {MultiAddressLike} delegate
     * @param {DaRuntimeImplsProxyType} proxyType
     * @param {number} delay
     **/
    addProxy: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        proxyType: DaRuntimeImplsProxyType,
        delay: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Proxy";
          palletCall: {
            name: "AddProxy";
            params: {
              delegate: MultiAddressLike;
              proxyType: DaRuntimeImplsProxyType;
              delay: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_proxy`].
     *
     * @param {MultiAddressLike} delegate
     * @param {DaRuntimeImplsProxyType} proxyType
     * @param {number} delay
     **/
    removeProxy: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        proxyType: DaRuntimeImplsProxyType,
        delay: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Proxy";
          palletCall: {
            name: "RemoveProxy";
            params: {
              delegate: MultiAddressLike;
              proxyType: DaRuntimeImplsProxyType;
              delay: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_proxies`].
     *
     **/
    removeProxies: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Proxy";
          palletCall: {
            name: "RemoveProxies";
          };
        }
      >
    >;

    /**
     * See [`Pallet::create_pure`].
     *
     * @param {DaRuntimeImplsProxyType} proxyType
     * @param {number} delay
     * @param {number} index
     **/
    createPure: GenericTxCall<
      Rv,
      (
        proxyType: DaRuntimeImplsProxyType,
        delay: number,
        index: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Proxy";
          palletCall: {
            name: "CreatePure";
            params: {
              proxyType: DaRuntimeImplsProxyType;
              delay: number;
              index: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::kill_pure`].
     *
     * @param {MultiAddressLike} spawner
     * @param {DaRuntimeImplsProxyType} proxyType
     * @param {number} index
     * @param {number} height
     * @param {number} extIndex
     **/
    killPure: GenericTxCall<
      Rv,
      (
        spawner: MultiAddressLike,
        proxyType: DaRuntimeImplsProxyType,
        index: number,
        height: number,
        extIndex: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Proxy";
          palletCall: {
            name: "KillPure";
            params: {
              spawner: MultiAddressLike;
              proxyType: DaRuntimeImplsProxyType;
              index: number;
              height: number;
              extIndex: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::announce`].
     *
     * @param {MultiAddressLike} real
     * @param {H256} callHash
     **/
    announce: GenericTxCall<
      Rv,
      (
        real: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Proxy";
          palletCall: {
            name: "Announce";
            params: { real: MultiAddressLike; callHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_announcement`].
     *
     * @param {MultiAddressLike} real
     * @param {H256} callHash
     **/
    removeAnnouncement: GenericTxCall<
      Rv,
      (
        real: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Proxy";
          palletCall: {
            name: "RemoveAnnouncement";
            params: { real: MultiAddressLike; callHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::reject_announcement`].
     *
     * @param {MultiAddressLike} delegate
     * @param {H256} callHash
     **/
    rejectAnnouncement: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Proxy";
          palletCall: {
            name: "RejectAnnouncement";
            params: { delegate: MultiAddressLike; callHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::proxy_announced`].
     *
     * @param {MultiAddressLike} delegate
     * @param {MultiAddressLike} real
     * @param {DaRuntimeImplsProxyType | undefined} forceProxyType
     * @param {DaRuntimeRuntimeCallLike} call
     **/
    proxyAnnounced: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        real: MultiAddressLike,
        forceProxyType: DaRuntimeImplsProxyType | undefined,
        call: DaRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "Proxy";
          palletCall: {
            name: "ProxyAnnounced";
            params: {
              delegate: MultiAddressLike;
              real: MultiAddressLike;
              forceProxyType: DaRuntimeImplsProxyType | undefined;
              call: DaRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `TxPause`'s transaction calls
   **/
  txPause: {
    /**
     * See [`Pallet::pause`].
     *
     * @param {[BytesLike, BytesLike]} fullName
     **/
    pause: GenericTxCall<
      Rv,
      (fullName: [BytesLike, BytesLike]) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "TxPause";
          palletCall: {
            name: "Pause";
            params: { fullName: [BytesLike, BytesLike] };
          };
        }
      >
    >;

    /**
     * See [`Pallet::unpause`].
     *
     * @param {[BytesLike, BytesLike]} ident
     **/
    unpause: GenericTxCall<
      Rv,
      (ident: [BytesLike, BytesLike]) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "TxPause";
          palletCall: {
            name: "Unpause";
            params: { ident: [BytesLike, BytesLike] };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `TreasuryCommittee`'s transaction calls
   **/
  treasuryCommittee: {
    /**
     * See [`Pallet::set_members`].
     *
     * @param {Array<AccountId32Like>} newMembers
     * @param {AccountId32Like | undefined} prime
     * @param {number} oldCount
     **/
    setMembers: GenericTxCall<
      Rv,
      (
        newMembers: Array<AccountId32Like>,
        prime: AccountId32Like | undefined,
        oldCount: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "TreasuryCommittee";
          palletCall: {
            name: "SetMembers";
            params: {
              newMembers: Array<AccountId32Like>;
              prime: AccountId32Like | undefined;
              oldCount: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::execute`].
     *
     * @param {DaRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    execute: GenericTxCall<
      Rv,
      (
        proposal: DaRuntimeRuntimeCallLike,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "TreasuryCommittee";
          palletCall: {
            name: "Execute";
            params: { proposal: DaRuntimeRuntimeCallLike; lengthBound: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::propose`].
     *
     * @param {number} threshold
     * @param {DaRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    propose: GenericTxCall<
      Rv,
      (
        threshold: number,
        proposal: DaRuntimeRuntimeCallLike,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "TreasuryCommittee";
          palletCall: {
            name: "Propose";
            params: {
              threshold: number;
              proposal: DaRuntimeRuntimeCallLike;
              lengthBound: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::vote`].
     *
     * @param {H256} proposal
     * @param {number} index
     * @param {boolean} approve
     **/
    vote: GenericTxCall<
      Rv,
      (
        proposal: H256,
        index: number,
        approve: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "TreasuryCommittee";
          palletCall: {
            name: "Vote";
            params: { proposal: H256; index: number; approve: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::disapprove_proposal`].
     *
     * @param {H256} proposalHash
     **/
    disapproveProposal: GenericTxCall<
      Rv,
      (proposalHash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "TreasuryCommittee";
          palletCall: {
            name: "DisapproveProposal";
            params: { proposalHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::close`].
     *
     * @param {H256} proposalHash
     * @param {number} index
     * @param {SpWeightsWeightV2Weight} proposalWeightBound
     * @param {number} lengthBound
     **/
    close: GenericTxCall<
      Rv,
      (
        proposalHash: H256,
        index: number,
        proposalWeightBound: SpWeightsWeightV2Weight,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: "TreasuryCommittee";
          palletCall: {
            name: "Close";
            params: {
              proposalHash: H256;
              index: number;
              proposalWeightBound: SpWeightsWeightV2Weight;
              lengthBound: number;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
}
