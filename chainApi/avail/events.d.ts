// Generated by dedot cli

import type {
  GenericChainEvents,
  GenericPalletEvent,
  RpcVersion,
} from "dedot/types";
import type {
  DispatchInfo,
  DispatchError,
  AccountId32,
  H256,
  Result,
  Perbill,
  FixedBytes,
  Bytes,
  U256,
} from "dedot/codecs";
import type {
  FrameSupportTokensMiscBalanceStatus,
  PalletElectionProviderMultiPhaseElectionCompute,
  SpNposElectionsElectionScore,
  PalletElectionProviderMultiPhasePhase,
  PalletStakingRewardDestination,
  PalletStakingValidatorPrefs,
  PalletStakingForcing,
  SpConsensusGrandpaAppPublic,
  PalletImOnlineSr25519AppSr25519Public,
  SpStakingExposure,
  AvailCoreAppId,
  AvailCoreBlockLengthRows,
  AvailCoreBlockLengthColumns,
  FrameSupportDispatchDispatchFeeModifier,
  PalletMultisigTimepoint,
  PalletNominationPoolsPoolState,
  PalletNominationPoolsCommissionChangeRate,
  PalletNominationPoolsCommissionClaimPermission,
  AvailCoreDataProofMessageMessageType,
  DaRuntimeImplsProxyType,
} from "./types";

export interface ChainEvents<Rv extends RpcVersion>
  extends GenericChainEvents<Rv> {
  /**
   * Pallet `System`'s events
   **/
  system: {
    /**
     * An extrinsic completed successfully.
     **/
    ExtrinsicSuccess: GenericPalletEvent<
      Rv,
      "System",
      "ExtrinsicSuccess",
      { dispatchInfo: DispatchInfo }
    >;

    /**
     * An extrinsic failed.
     **/
    ExtrinsicFailed: GenericPalletEvent<
      Rv,
      "System",
      "ExtrinsicFailed",
      { dispatchError: DispatchError; dispatchInfo: DispatchInfo }
    >;

    /**
     * `:code` was updated.
     **/
    CodeUpdated: GenericPalletEvent<Rv, "System", "CodeUpdated", null>;

    /**
     * A new account was created.
     **/
    NewAccount: GenericPalletEvent<
      Rv,
      "System",
      "NewAccount",
      { account: AccountId32 }
    >;

    /**
     * An account was reaped.
     **/
    KilledAccount: GenericPalletEvent<
      Rv,
      "System",
      "KilledAccount",
      { account: AccountId32 }
    >;

    /**
     * On on-chain remark happened.
     **/
    Remarked: GenericPalletEvent<
      Rv,
      "System",
      "Remarked",
      { sender: AccountId32; hash: H256 }
    >;

    /**
     * An upgrade was authorized.
     **/
    UpgradeAuthorized: GenericPalletEvent<
      Rv,
      "System",
      "UpgradeAuthorized",
      { codeHash: H256; checkVersion: boolean }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Utility`'s events
   **/
  utility: {
    /**
     * Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     * well as the error.
     **/
    BatchInterrupted: GenericPalletEvent<
      Rv,
      "Utility",
      "BatchInterrupted",
      { index: number; error: DispatchError }
    >;

    /**
     * Batch of dispatches completed fully with no error.
     **/
    BatchCompleted: GenericPalletEvent<Rv, "Utility", "BatchCompleted", null>;

    /**
     * Batch of dispatches completed but has errors.
     **/
    BatchCompletedWithErrors: GenericPalletEvent<
      Rv,
      "Utility",
      "BatchCompletedWithErrors",
      null
    >;

    /**
     * A single item within a Batch of dispatches has completed with no error.
     **/
    ItemCompleted: GenericPalletEvent<Rv, "Utility", "ItemCompleted", null>;

    /**
     * A single item within a Batch of dispatches has completed with error.
     **/
    ItemFailed: GenericPalletEvent<
      Rv,
      "Utility",
      "ItemFailed",
      { error: DispatchError }
    >;

    /**
     * A call was dispatched.
     **/
    DispatchedAs: GenericPalletEvent<
      Rv,
      "Utility",
      "DispatchedAs",
      { result: Result<[], DispatchError> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Indices`'s events
   **/
  indices: {
    /**
     * A account index was assigned.
     **/
    IndexAssigned: GenericPalletEvent<
      Rv,
      "Indices",
      "IndexAssigned",
      { who: AccountId32; index: number }
    >;

    /**
     * A account index has been freed up (unassigned).
     **/
    IndexFreed: GenericPalletEvent<
      Rv,
      "Indices",
      "IndexFreed",
      { index: number }
    >;

    /**
     * A account index has been frozen to its current account ID.
     **/
    IndexFrozen: GenericPalletEvent<
      Rv,
      "Indices",
      "IndexFrozen",
      { index: number; who: AccountId32 }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Balances`'s events
   **/
  balances: {
    /**
     * An account was created with some free balance.
     **/
    Endowed: GenericPalletEvent<
      Rv,
      "Balances",
      "Endowed",
      { account: AccountId32; freeBalance: bigint }
    >;

    /**
     * An account was removed whose balance was non-zero but below ExistentialDeposit,
     * resulting in an outright loss.
     **/
    DustLost: GenericPalletEvent<
      Rv,
      "Balances",
      "DustLost",
      { account: AccountId32; amount: bigint }
    >;

    /**
     * Transfer succeeded.
     **/
    Transfer: GenericPalletEvent<
      Rv,
      "Balances",
      "Transfer",
      { from: AccountId32; to: AccountId32; amount: bigint }
    >;

    /**
     * A balance was set by root.
     **/
    BalanceSet: GenericPalletEvent<
      Rv,
      "Balances",
      "BalanceSet",
      { who: AccountId32; free: bigint }
    >;

    /**
     * Some balance was reserved (moved from free to reserved).
     **/
    Reserved: GenericPalletEvent<
      Rv,
      "Balances",
      "Reserved",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some balance was unreserved (moved from reserved to free).
     **/
    Unreserved: GenericPalletEvent<
      Rv,
      "Balances",
      "Unreserved",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some balance was moved from the reserve of the first account to the second account.
     * Final argument indicates the destination balance type.
     **/
    ReserveRepatriated: GenericPalletEvent<
      Rv,
      "Balances",
      "ReserveRepatriated",
      {
        from: AccountId32;
        to: AccountId32;
        amount: bigint;
        destinationStatus: FrameSupportTokensMiscBalanceStatus;
      }
    >;

    /**
     * Some amount was deposited (e.g. for transaction fees).
     **/
    Deposit: GenericPalletEvent<
      Rv,
      "Balances",
      "Deposit",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some amount was withdrawn from the account (e.g. for transaction fees).
     **/
    Withdraw: GenericPalletEvent<
      Rv,
      "Balances",
      "Withdraw",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some amount was removed from the account (e.g. for misbehavior).
     **/
    Slashed: GenericPalletEvent<
      Rv,
      "Balances",
      "Slashed",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some amount was minted into an account.
     **/
    Minted: GenericPalletEvent<
      Rv,
      "Balances",
      "Minted",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some amount was burned from an account.
     **/
    Burned: GenericPalletEvent<
      Rv,
      "Balances",
      "Burned",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some amount was suspended from an account (it can be restored later).
     **/
    Suspended: GenericPalletEvent<
      Rv,
      "Balances",
      "Suspended",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some amount was restored into an account.
     **/
    Restored: GenericPalletEvent<
      Rv,
      "Balances",
      "Restored",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * An account was upgraded.
     **/
    Upgraded: GenericPalletEvent<
      Rv,
      "Balances",
      "Upgraded",
      { who: AccountId32 }
    >;

    /**
     * Total issuance was increased by `amount`, creating a credit to be balanced.
     **/
    Issued: GenericPalletEvent<Rv, "Balances", "Issued", { amount: bigint }>;

    /**
     * Total issuance was decreased by `amount`, creating a debt to be balanced.
     **/
    Rescinded: GenericPalletEvent<
      Rv,
      "Balances",
      "Rescinded",
      { amount: bigint }
    >;

    /**
     * Some balance was locked.
     **/
    Locked: GenericPalletEvent<
      Rv,
      "Balances",
      "Locked",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some balance was unlocked.
     **/
    Unlocked: GenericPalletEvent<
      Rv,
      "Balances",
      "Unlocked",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some balance was frozen.
     **/
    Frozen: GenericPalletEvent<
      Rv,
      "Balances",
      "Frozen",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some balance was thawed.
     **/
    Thawed: GenericPalletEvent<
      Rv,
      "Balances",
      "Thawed",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * The `TotalIssuance` was forcefully changed.
     **/
    TotalIssuanceForced: GenericPalletEvent<
      Rv,
      "Balances",
      "TotalIssuanceForced",
      { old: bigint; new: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `TransactionPayment`'s events
   **/
  transactionPayment: {
    /**
     * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
     * has been paid by `who`.
     **/
    TransactionFeePaid: GenericPalletEvent<
      Rv,
      "TransactionPayment",
      "TransactionFeePaid",
      { who: AccountId32; actualFee: bigint; tip: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ElectionProviderMultiPhase`'s events
   **/
  electionProviderMultiPhase: {
    /**
     * A solution was stored with the given compute.
     *
     * The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,
     * the stored solution was submited in the signed phase by a miner with the `AccountId`.
     * Otherwise, the solution was stored either during the unsigned phase or by
     * `T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make
     * room for this one.
     **/
    SolutionStored: GenericPalletEvent<
      Rv,
      "ElectionProviderMultiPhase",
      "SolutionStored",
      {
        compute: PalletElectionProviderMultiPhaseElectionCompute;
        origin?: AccountId32 | undefined;
        prevEjected: boolean;
      }
    >;

    /**
     * The election has been finalized, with the given computation and score.
     **/
    ElectionFinalized: GenericPalletEvent<
      Rv,
      "ElectionProviderMultiPhase",
      "ElectionFinalized",
      {
        compute: PalletElectionProviderMultiPhaseElectionCompute;
        score: SpNposElectionsElectionScore;
      }
    >;

    /**
     * An election failed.
     *
     * Not much can be said about which computes failed in the process.
     **/
    ElectionFailed: GenericPalletEvent<
      Rv,
      "ElectionProviderMultiPhase",
      "ElectionFailed",
      null
    >;

    /**
     * An account has been rewarded for their signed submission being finalized.
     **/
    Rewarded: GenericPalletEvent<
      Rv,
      "ElectionProviderMultiPhase",
      "Rewarded",
      { account: AccountId32; value: bigint }
    >;

    /**
     * An account has been slashed for submitting an invalid signed submission.
     **/
    Slashed: GenericPalletEvent<
      Rv,
      "ElectionProviderMultiPhase",
      "Slashed",
      { account: AccountId32; value: bigint }
    >;

    /**
     * There was a phase transition in a given round.
     **/
    PhaseTransitioned: GenericPalletEvent<
      Rv,
      "ElectionProviderMultiPhase",
      "PhaseTransitioned",
      {
        from: PalletElectionProviderMultiPhasePhase;
        to: PalletElectionProviderMultiPhasePhase;
        round: number;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Staking`'s events
   **/
  staking: {
    /**
     * The era payout has been set; the first balance is the validator-payout; the second is
     * the remainder from the maximum amount of reward.
     **/
    EraPaid: GenericPalletEvent<
      Rv,
      "Staking",
      "EraPaid",
      { eraIndex: number; validatorPayout: bigint; remainder: bigint }
    >;

    /**
     * The nominator has been rewarded by this amount to this destination.
     **/
    Rewarded: GenericPalletEvent<
      Rv,
      "Staking",
      "Rewarded",
      {
        stash: AccountId32;
        dest: PalletStakingRewardDestination;
        amount: bigint;
      }
    >;

    /**
     * A staker (validator or nominator) has been slashed by the given amount.
     **/
    Slashed: GenericPalletEvent<
      Rv,
      "Staking",
      "Slashed",
      { staker: AccountId32; amount: bigint }
    >;

    /**
     * A slash for the given validator, for the given percentage of their stake, at the given
     * era as been reported.
     **/
    SlashReported: GenericPalletEvent<
      Rv,
      "Staking",
      "SlashReported",
      { validator: AccountId32; fraction: Perbill; slashEra: number }
    >;

    /**
     * An old slashing report from a prior era was discarded because it could
     * not be processed.
     **/
    OldSlashingReportDiscarded: GenericPalletEvent<
      Rv,
      "Staking",
      "OldSlashingReportDiscarded",
      { sessionIndex: number }
    >;

    /**
     * A new set of stakers was elected.
     **/
    StakersElected: GenericPalletEvent<Rv, "Staking", "StakersElected", null>;

    /**
     * An account has bonded this amount. \[stash, amount\]
     *
     * NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,
     * it will not be emitted for staking rewards when they are added to stake.
     **/
    Bonded: GenericPalletEvent<
      Rv,
      "Staking",
      "Bonded",
      { stash: AccountId32; amount: bigint }
    >;

    /**
     * An account has unbonded this amount.
     **/
    Unbonded: GenericPalletEvent<
      Rv,
      "Staking",
      "Unbonded",
      { stash: AccountId32; amount: bigint }
    >;

    /**
     * An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`
     * from the unlocking queue.
     **/
    Withdrawn: GenericPalletEvent<
      Rv,
      "Staking",
      "Withdrawn",
      { stash: AccountId32; amount: bigint }
    >;

    /**
     * A nominator has been kicked from a validator.
     **/
    Kicked: GenericPalletEvent<
      Rv,
      "Staking",
      "Kicked",
      { nominator: AccountId32; stash: AccountId32 }
    >;

    /**
     * The election failed. No new era is planned.
     **/
    StakingElectionFailed: GenericPalletEvent<
      Rv,
      "Staking",
      "StakingElectionFailed",
      null
    >;

    /**
     * An account has stopped participating as either a validator or nominator.
     **/
    Chilled: GenericPalletEvent<
      Rv,
      "Staking",
      "Chilled",
      { stash: AccountId32 }
    >;

    /**
     * The stakers' rewards are getting paid.
     **/
    PayoutStarted: GenericPalletEvent<
      Rv,
      "Staking",
      "PayoutStarted",
      { eraIndex: number; validatorStash: AccountId32 }
    >;

    /**
     * A validator has set their preferences.
     **/
    ValidatorPrefsSet: GenericPalletEvent<
      Rv,
      "Staking",
      "ValidatorPrefsSet",
      { stash: AccountId32; prefs: PalletStakingValidatorPrefs }
    >;

    /**
     * Voters size limit reached.
     **/
    SnapshotVotersSizeExceeded: GenericPalletEvent<
      Rv,
      "Staking",
      "SnapshotVotersSizeExceeded",
      { size: number }
    >;

    /**
     * Targets size limit reached.
     **/
    SnapshotTargetsSizeExceeded: GenericPalletEvent<
      Rv,
      "Staking",
      "SnapshotTargetsSizeExceeded",
      { size: number }
    >;

    /**
     * A new force era mode was set.
     **/
    ForceEra: GenericPalletEvent<
      Rv,
      "Staking",
      "ForceEra",
      { mode: PalletStakingForcing }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Session`'s events
   **/
  session: {
    /**
     * New session has happened. Note that the argument is the session index, not the
     * block number as the type might suggest.
     **/
    NewSession: GenericPalletEvent<
      Rv,
      "Session",
      "NewSession",
      { sessionIndex: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `TechnicalCommittee`'s events
   **/
  technicalCommittee: {
    /**
     * A motion (given hash) has been proposed (by given account) with a threshold (given
     * `MemberCount`).
     **/
    Proposed: GenericPalletEvent<
      Rv,
      "TechnicalCommittee",
      "Proposed",
      {
        account: AccountId32;
        proposalIndex: number;
        proposalHash: H256;
        threshold: number;
      }
    >;

    /**
     * A motion (given hash) has been voted on by given account, leaving
     * a tally (yes votes and no votes given respectively as `MemberCount`).
     **/
    Voted: GenericPalletEvent<
      Rv,
      "TechnicalCommittee",
      "Voted",
      {
        account: AccountId32;
        proposalHash: H256;
        voted: boolean;
        yes: number;
        no: number;
      }
    >;

    /**
     * A motion was approved by the required threshold.
     **/
    Approved: GenericPalletEvent<
      Rv,
      "TechnicalCommittee",
      "Approved",
      { proposalHash: H256 }
    >;

    /**
     * A motion was not approved by the required threshold.
     **/
    Disapproved: GenericPalletEvent<
      Rv,
      "TechnicalCommittee",
      "Disapproved",
      { proposalHash: H256 }
    >;

    /**
     * A motion was executed; result will be `Ok` if it returned without error.
     **/
    Executed: GenericPalletEvent<
      Rv,
      "TechnicalCommittee",
      "Executed",
      { proposalHash: H256; result: Result<[], DispatchError> }
    >;

    /**
     * A single member did some action; result will be `Ok` if it returned without error.
     **/
    MemberExecuted: GenericPalletEvent<
      Rv,
      "TechnicalCommittee",
      "MemberExecuted",
      { proposalHash: H256; result: Result<[], DispatchError> }
    >;

    /**
     * A proposal was closed because its threshold was reached or after its duration was up.
     **/
    Closed: GenericPalletEvent<
      Rv,
      "TechnicalCommittee",
      "Closed",
      { proposalHash: H256; yes: number; no: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Grandpa`'s events
   **/
  grandpa: {
    /**
     * New authority set has been applied.
     **/
    NewAuthorities: GenericPalletEvent<
      Rv,
      "Grandpa",
      "NewAuthorities",
      { authoritySet: Array<[SpConsensusGrandpaAppPublic, bigint]> }
    >;

    /**
     * Current authority set has been paused.
     **/
    Paused: GenericPalletEvent<Rv, "Grandpa", "Paused", null>;

    /**
     * Current authority set has been resumed.
     **/
    Resumed: GenericPalletEvent<Rv, "Grandpa", "Resumed", null>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Treasury`'s events
   **/
  treasury: {
    /**
     * New proposal.
     **/
    Proposed: GenericPalletEvent<
      Rv,
      "Treasury",
      "Proposed",
      { proposalIndex: number }
    >;

    /**
     * We have ended a spend period and will now allocate funds.
     **/
    Spending: GenericPalletEvent<
      Rv,
      "Treasury",
      "Spending",
      { budgetRemaining: bigint }
    >;

    /**
     * Some funds have been allocated.
     **/
    Awarded: GenericPalletEvent<
      Rv,
      "Treasury",
      "Awarded",
      { proposalIndex: number; award: bigint; account: AccountId32 }
    >;

    /**
     * A proposal was rejected; funds were slashed.
     **/
    Rejected: GenericPalletEvent<
      Rv,
      "Treasury",
      "Rejected",
      { proposalIndex: number; slashed: bigint }
    >;

    /**
     * Some of our funds have been burnt.
     **/
    Burnt: GenericPalletEvent<Rv, "Treasury", "Burnt", { burntFunds: bigint }>;

    /**
     * Spending has finished; this is the amount that rolls over until next spend.
     **/
    Rollover: GenericPalletEvent<
      Rv,
      "Treasury",
      "Rollover",
      { rolloverBalance: bigint }
    >;

    /**
     * Some funds have been deposited.
     **/
    Deposit: GenericPalletEvent<Rv, "Treasury", "Deposit", { value: bigint }>;

    /**
     * A new spend proposal has been approved.
     **/
    SpendApproved: GenericPalletEvent<
      Rv,
      "Treasury",
      "SpendApproved",
      { proposalIndex: number; amount: bigint; beneficiary: AccountId32 }
    >;

    /**
     * The inactive funds of the pallet have been updated.
     **/
    UpdatedInactive: GenericPalletEvent<
      Rv,
      "Treasury",
      "UpdatedInactive",
      { reactivated: bigint; deactivated: bigint }
    >;

    /**
     * A new asset spend proposal has been approved.
     **/
    AssetSpendApproved: GenericPalletEvent<
      Rv,
      "Treasury",
      "AssetSpendApproved",
      {
        index: number;
        assetKind: [];
        amount: bigint;
        beneficiary: AccountId32;
        validFrom: number;
        expireAt: number;
      }
    >;

    /**
     * An approved spend was voided.
     **/
    AssetSpendVoided: GenericPalletEvent<
      Rv,
      "Treasury",
      "AssetSpendVoided",
      { index: number }
    >;

    /**
     * A payment happened.
     **/
    Paid: GenericPalletEvent<
      Rv,
      "Treasury",
      "Paid",
      { index: number; paymentId: [] }
    >;

    /**
     * A payment failed and can be retried.
     **/
    PaymentFailed: GenericPalletEvent<
      Rv,
      "Treasury",
      "PaymentFailed",
      { index: number; paymentId: [] }
    >;

    /**
     * A spend was processed and removed from the storage. It might have been successfully
     * paid or it may have expired.
     **/
    SpendProcessed: GenericPalletEvent<
      Rv,
      "Treasury",
      "SpendProcessed",
      { index: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Sudo`'s events
   **/
  sudo: {
    /**
     * A sudo call just took place.
     **/
    Sudid: GenericPalletEvent<
      Rv,
      "Sudo",
      "Sudid",
      {
        /**
         * The result of the call made by the sudo user.
         **/
        sudoResult: Result<[], DispatchError>;
      }
    >;

    /**
     * The sudo key has been updated.
     **/
    KeyChanged: GenericPalletEvent<
      Rv,
      "Sudo",
      "KeyChanged",
      {
        /**
         * The old sudo key (if one was previously set).
         **/
        old?: AccountId32 | undefined;

        /**
         * The new sudo key (if one was set).
         **/
        new: AccountId32;
      }
    >;

    /**
     * The key was permanently removed.
     **/
    KeyRemoved: GenericPalletEvent<Rv, "Sudo", "KeyRemoved", null>;

    /**
     * A [sudo_as](Pallet::sudo_as) call just took place.
     **/
    SudoAsDone: GenericPalletEvent<
      Rv,
      "Sudo",
      "SudoAsDone",
      {
        /**
         * The result of the call made by the sudo user.
         **/
        sudoResult: Result<[], DispatchError>;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ImOnline`'s events
   **/
  imOnline: {
    /**
     * A new heartbeat was received from `AuthorityId`.
     **/
    HeartbeatReceived: GenericPalletEvent<
      Rv,
      "ImOnline",
      "HeartbeatReceived",
      { authorityId: PalletImOnlineSr25519AppSr25519Public }
    >;

    /**
     * At the end of the session, no offence was committed.
     **/
    AllGood: GenericPalletEvent<Rv, "ImOnline", "AllGood", null>;

    /**
     * At the end of the session, at least one validator was found to be offline.
     **/
    SomeOffline: GenericPalletEvent<
      Rv,
      "ImOnline",
      "SomeOffline",
      { offline: Array<[AccountId32, SpStakingExposure]> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Offences`'s events
   **/
  offences: {
    /**
     * There is an offence reported of the given `kind` happened at the `session_index` and
     * (kind-specific) time slot. This event is not deposited for duplicate slashes.
     * \[kind, timeslot\].
     **/
    Offence: GenericPalletEvent<
      Rv,
      "Offences",
      "Offence",
      { kind: FixedBytes<16>; timeslot: Bytes }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Scheduler`'s events
   **/
  scheduler: {
    /**
     * Scheduled some task.
     **/
    Scheduled: GenericPalletEvent<
      Rv,
      "Scheduler",
      "Scheduled",
      { when: number; index: number }
    >;

    /**
     * Canceled some task.
     **/
    Canceled: GenericPalletEvent<
      Rv,
      "Scheduler",
      "Canceled",
      { when: number; index: number }
    >;

    /**
     * Dispatched some task.
     **/
    Dispatched: GenericPalletEvent<
      Rv,
      "Scheduler",
      "Dispatched",
      {
        task: [number, number];
        id?: FixedBytes<32> | undefined;
        result: Result<[], DispatchError>;
      }
    >;

    /**
     * The call for the provided hash was not found so the task has been aborted.
     **/
    CallUnavailable: GenericPalletEvent<
      Rv,
      "Scheduler",
      "CallUnavailable",
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task was unable to be renewed since the agenda is full at that block.
     **/
    PeriodicFailed: GenericPalletEvent<
      Rv,
      "Scheduler",
      "PeriodicFailed",
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task can never be executed since it is overweight.
     **/
    PermanentlyOverweight: GenericPalletEvent<
      Rv,
      "Scheduler",
      "PermanentlyOverweight",
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `DataAvailability`'s events
   **/
  dataAvailability: {
    /**
     * A new application key was created.
     **/
    ApplicationKeyCreated: GenericPalletEvent<
      Rv,
      "DataAvailability",
      "ApplicationKeyCreated",
      { key: Bytes; owner: AccountId32; id: AvailCoreAppId }
    >;
    DataSubmitted: GenericPalletEvent<
      Rv,
      "DataAvailability",
      "DataSubmitted",
      { who: AccountId32; dataHash: H256 }
    >;
    BlockLengthProposalSubmitted: GenericPalletEvent<
      Rv,
      "DataAvailability",
      "BlockLengthProposalSubmitted",
      { rows: AvailCoreBlockLengthRows; cols: AvailCoreBlockLengthColumns }
    >;
    ApplicationKeySet: GenericPalletEvent<
      Rv,
      "DataAvailability",
      "ApplicationKeySet",
      { oldKey: Bytes; newKey: Bytes }
    >;
    SubmitDataFeeModifierSet: GenericPalletEvent<
      Rv,
      "DataAvailability",
      "SubmitDataFeeModifierSet",
      { value: FrameSupportDispatchDispatchFeeModifier }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Preimage`'s events
   **/
  preimage: {
    /**
     * A preimage has been noted.
     **/
    Noted: GenericPalletEvent<Rv, "Preimage", "Noted", { hash: H256 }>;

    /**
     * A preimage has been requested.
     **/
    Requested: GenericPalletEvent<Rv, "Preimage", "Requested", { hash: H256 }>;

    /**
     * A preimage has ben cleared.
     **/
    Cleared: GenericPalletEvent<Rv, "Preimage", "Cleared", { hash: H256 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Multisig`'s events
   **/
  multisig: {
    /**
     * A new multisig operation has begun.
     **/
    NewMultisig: GenericPalletEvent<
      Rv,
      "Multisig",
      "NewMultisig",
      {
        approving: AccountId32;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      }
    >;

    /**
     * A multisig operation has been approved by someone.
     **/
    MultisigApproval: GenericPalletEvent<
      Rv,
      "Multisig",
      "MultisigApproval",
      {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      }
    >;

    /**
     * A multisig operation has been executed.
     **/
    MultisigExecuted: GenericPalletEvent<
      Rv,
      "Multisig",
      "MultisigExecuted",
      {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
        result: Result<[], DispatchError>;
      }
    >;

    /**
     * A multisig operation has been cancelled.
     **/
    MultisigCancelled: GenericPalletEvent<
      Rv,
      "Multisig",
      "MultisigCancelled",
      {
        cancelling: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `VoterList`'s events
   **/
  voterList: {
    /**
     * Moved an account from one bag to another.
     **/
    Rebagged: GenericPalletEvent<
      Rv,
      "VoterList",
      "Rebagged",
      { who: AccountId32; from: bigint; to: bigint }
    >;

    /**
     * Updated the score of some account to the given amount.
     **/
    ScoreUpdated: GenericPalletEvent<
      Rv,
      "VoterList",
      "ScoreUpdated",
      { who: AccountId32; newScore: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `NominationPools`'s events
   **/
  nominationPools: {
    /**
     * A pool has been created.
     **/
    Created: GenericPalletEvent<
      Rv,
      "NominationPools",
      "Created",
      { depositor: AccountId32; poolId: number }
    >;

    /**
     * A member has became bonded in a pool.
     **/
    Bonded: GenericPalletEvent<
      Rv,
      "NominationPools",
      "Bonded",
      { member: AccountId32; poolId: number; bonded: bigint; joined: boolean }
    >;

    /**
     * A payout has been made to a member.
     **/
    PaidOut: GenericPalletEvent<
      Rv,
      "NominationPools",
      "PaidOut",
      { member: AccountId32; poolId: number; payout: bigint }
    >;

    /**
     * A member has unbonded from their pool.
     *
     * - `balance` is the corresponding balance of the number of points that has been
     * requested to be unbonded (the argument of the `unbond` transaction) from the bonded
     * pool.
     * - `points` is the number of points that are issued as a result of `balance` being
     * dissolved into the corresponding unbonding pool.
     * - `era` is the era in which the balance will be unbonded.
     * In the absence of slashing, these values will match. In the presence of slashing, the
     * number of points that are issued in the unbonding pool will be less than the amount
     * requested to be unbonded.
     **/
    Unbonded: GenericPalletEvent<
      Rv,
      "NominationPools",
      "Unbonded",
      {
        member: AccountId32;
        poolId: number;
        balance: bigint;
        points: bigint;
        era: number;
      }
    >;

    /**
     * A member has withdrawn from their pool.
     *
     * The given number of `points` have been dissolved in return of `balance`.
     *
     * Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance
     * will be 1.
     **/
    Withdrawn: GenericPalletEvent<
      Rv,
      "NominationPools",
      "Withdrawn",
      { member: AccountId32; poolId: number; balance: bigint; points: bigint }
    >;

    /**
     * A pool has been destroyed.
     **/
    Destroyed: GenericPalletEvent<
      Rv,
      "NominationPools",
      "Destroyed",
      { poolId: number }
    >;

    /**
     * The state of a pool has changed
     **/
    StateChanged: GenericPalletEvent<
      Rv,
      "NominationPools",
      "StateChanged",
      { poolId: number; newState: PalletNominationPoolsPoolState }
    >;

    /**
     * A member has been removed from a pool.
     *
     * The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked).
     **/
    MemberRemoved: GenericPalletEvent<
      Rv,
      "NominationPools",
      "MemberRemoved",
      { poolId: number; member: AccountId32 }
    >;

    /**
     * The roles of a pool have been updated to the given new roles. Note that the depositor
     * can never change.
     **/
    RolesUpdated: GenericPalletEvent<
      Rv,
      "NominationPools",
      "RolesUpdated",
      {
        root?: AccountId32 | undefined;
        bouncer?: AccountId32 | undefined;
        nominator?: AccountId32 | undefined;
      }
    >;

    /**
     * The active balance of pool `pool_id` has been slashed to `balance`.
     **/
    PoolSlashed: GenericPalletEvent<
      Rv,
      "NominationPools",
      "PoolSlashed",
      { poolId: number; balance: bigint }
    >;

    /**
     * The unbond pool at `era` of pool `pool_id` has been slashed to `balance`.
     **/
    UnbondingPoolSlashed: GenericPalletEvent<
      Rv,
      "NominationPools",
      "UnbondingPoolSlashed",
      { poolId: number; era: number; balance: bigint }
    >;

    /**
     * A pool's commission setting has been changed.
     **/
    PoolCommissionUpdated: GenericPalletEvent<
      Rv,
      "NominationPools",
      "PoolCommissionUpdated",
      { poolId: number; current?: [Perbill, AccountId32] | undefined }
    >;

    /**
     * A pool's maximum commission setting has been changed.
     **/
    PoolMaxCommissionUpdated: GenericPalletEvent<
      Rv,
      "NominationPools",
      "PoolMaxCommissionUpdated",
      { poolId: number; maxCommission: Perbill }
    >;

    /**
     * A pool's commission `change_rate` has been changed.
     **/
    PoolCommissionChangeRateUpdated: GenericPalletEvent<
      Rv,
      "NominationPools",
      "PoolCommissionChangeRateUpdated",
      { poolId: number; changeRate: PalletNominationPoolsCommissionChangeRate }
    >;

    /**
     * Pool commission claim permission has been updated.
     **/
    PoolCommissionClaimPermissionUpdated: GenericPalletEvent<
      Rv,
      "NominationPools",
      "PoolCommissionClaimPermissionUpdated",
      {
        poolId: number;
        permission?: PalletNominationPoolsCommissionClaimPermission | undefined;
      }
    >;

    /**
     * Pool commission has been claimed.
     **/
    PoolCommissionClaimed: GenericPalletEvent<
      Rv,
      "NominationPools",
      "PoolCommissionClaimed",
      { poolId: number; commission: bigint }
    >;

    /**
     * Topped up deficit in frozen ED of the reward pool.
     **/
    MinBalanceDeficitAdjusted: GenericPalletEvent<
      Rv,
      "NominationPools",
      "MinBalanceDeficitAdjusted",
      { poolId: number; amount: bigint }
    >;

    /**
     * Claimed excess frozen ED of af the reward pool.
     **/
    MinBalanceExcessAdjusted: GenericPalletEvent<
      Rv,
      "NominationPools",
      "MinBalanceExcessAdjusted",
      { poolId: number; amount: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Identity`'s events
   **/
  identity: {
    /**
     * A name was set or reset (which will remove all judgements).
     **/
    IdentitySet: GenericPalletEvent<
      Rv,
      "Identity",
      "IdentitySet",
      { who: AccountId32 }
    >;

    /**
     * A name was cleared, and the given balance returned.
     **/
    IdentityCleared: GenericPalletEvent<
      Rv,
      "Identity",
      "IdentityCleared",
      { who: AccountId32; deposit: bigint }
    >;

    /**
     * A name was removed and the given balance slashed.
     **/
    IdentityKilled: GenericPalletEvent<
      Rv,
      "Identity",
      "IdentityKilled",
      { who: AccountId32; deposit: bigint }
    >;

    /**
     * A judgement was asked from a registrar.
     **/
    JudgementRequested: GenericPalletEvent<
      Rv,
      "Identity",
      "JudgementRequested",
      { who: AccountId32; registrarIndex: number }
    >;

    /**
     * A judgement request was retracted.
     **/
    JudgementUnrequested: GenericPalletEvent<
      Rv,
      "Identity",
      "JudgementUnrequested",
      { who: AccountId32; registrarIndex: number }
    >;

    /**
     * A judgement was given by a registrar.
     **/
    JudgementGiven: GenericPalletEvent<
      Rv,
      "Identity",
      "JudgementGiven",
      { target: AccountId32; registrarIndex: number }
    >;

    /**
     * A registrar was added.
     **/
    RegistrarAdded: GenericPalletEvent<
      Rv,
      "Identity",
      "RegistrarAdded",
      { registrarIndex: number }
    >;

    /**
     * A sub-identity was added to an identity and the deposit paid.
     **/
    SubIdentityAdded: GenericPalletEvent<
      Rv,
      "Identity",
      "SubIdentityAdded",
      { sub: AccountId32; main: AccountId32; deposit: bigint }
    >;

    /**
     * A sub-identity was removed from an identity and the deposit freed.
     **/
    SubIdentityRemoved: GenericPalletEvent<
      Rv,
      "Identity",
      "SubIdentityRemoved",
      { sub: AccountId32; main: AccountId32; deposit: bigint }
    >;

    /**
     * A sub-identity was cleared, and the given deposit repatriated from the
     * main identity account to the sub-identity account.
     **/
    SubIdentityRevoked: GenericPalletEvent<
      Rv,
      "Identity",
      "SubIdentityRevoked",
      { sub: AccountId32; main: AccountId32; deposit: bigint }
    >;

    /**
     * A username authority was added.
     **/
    AuthorityAdded: GenericPalletEvent<
      Rv,
      "Identity",
      "AuthorityAdded",
      { authority: AccountId32 }
    >;

    /**
     * A username authority was removed.
     **/
    AuthorityRemoved: GenericPalletEvent<
      Rv,
      "Identity",
      "AuthorityRemoved",
      { authority: AccountId32 }
    >;

    /**
     * A username was set for `who`.
     **/
    UsernameSet: GenericPalletEvent<
      Rv,
      "Identity",
      "UsernameSet",
      { who: AccountId32; username: Bytes }
    >;

    /**
     * A username was queued, but `who` must accept it prior to `expiration`.
     **/
    UsernameQueued: GenericPalletEvent<
      Rv,
      "Identity",
      "UsernameQueued",
      { who: AccountId32; username: Bytes; expiration: number }
    >;

    /**
     * A queued username passed its expiration without being claimed and was removed.
     **/
    PreapprovalExpired: GenericPalletEvent<
      Rv,
      "Identity",
      "PreapprovalExpired",
      { whose: AccountId32 }
    >;

    /**
     * A username was set as a primary and can be looked up from `who`.
     **/
    PrimaryUsernameSet: GenericPalletEvent<
      Rv,
      "Identity",
      "PrimaryUsernameSet",
      { who: AccountId32; username: Bytes }
    >;

    /**
     * A dangling username (as in, a username corresponding to an account that has removed its
     * identity) has been removed.
     **/
    DanglingUsernameRemoved: GenericPalletEvent<
      Rv,
      "Identity",
      "DanglingUsernameRemoved",
      { who: AccountId32; username: Bytes }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Mandate`'s events
   **/
  mandate: {
    /**
     * A root operation was executed, show result
     **/
    RootOp: GenericPalletEvent<
      Rv,
      "Mandate",
      "RootOp",
      { result: Result<[], DispatchError> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Vector`'s events
   **/
  vector: {
    /**
     * Emit event once the head is updated.
     **/
    HeadUpdated: GenericPalletEvent<
      Rv,
      "Vector",
      "HeadUpdated",
      { slot: bigint; finalizationRoot: H256; executionStateRoot: H256 }
    >;

    /**
     * Emit event once the sync committee updates.
     **/
    SyncCommitteeUpdated: GenericPalletEvent<
      Rv,
      "Vector",
      "SyncCommitteeUpdated",
      { period: bigint; root: U256 }
    >;

    /**
     * Emit when new updater is set.
     **/
    BroadcasterUpdated: GenericPalletEvent<
      Rv,
      "Vector",
      "BroadcasterUpdated",
      { old: H256; new: H256; domain: number }
    >;

    /**
     * Emit when message gets executed.
     **/
    MessageExecuted: GenericPalletEvent<
      Rv,
      "Vector",
      "MessageExecuted",
      { from: H256; to: H256; messageId: bigint; messageRoot: H256 }
    >;

    /**
     * Emit if source chain gets frozen.
     **/
    SourceChainFrozen: GenericPalletEvent<
      Rv,
      "Vector",
      "SourceChainFrozen",
      { sourceChainId: number; frozen: boolean }
    >;

    /**
     * Emit when message is submitted.
     **/
    MessageSubmitted: GenericPalletEvent<
      Rv,
      "Vector",
      "MessageSubmitted",
      {
        from: AccountId32;
        to: H256;
        messageType: AvailCoreDataProofMessageMessageType;
        destinationDomain: number;
        messageId: bigint;
      }
    >;

    /**
     * Emit whitelisted domains that are updated.
     **/
    WhitelistedDomainsUpdated: GenericPalletEvent<
      Rv,
      "Vector",
      "WhitelistedDomainsUpdated",
      null
    >;

    /**
     * Emit when configuration is updated.
     **/
    ConfigurationUpdated: GenericPalletEvent<
      Rv,
      "Vector",
      "ConfigurationUpdated",
      { slotsPerPeriod: bigint; finalityThreshold: number }
    >;

    /**
     * Emit function Ids that are updated.
     **/
    FunctionIdsUpdated: GenericPalletEvent<
      Rv,
      "Vector",
      "FunctionIdsUpdated",
      { value?: [H256, H256] | undefined }
    >;

    /**
     * Emit updated step verification key.
     **/
    StepVerificationKeyUpdated: GenericPalletEvent<
      Rv,
      "Vector",
      "StepVerificationKeyUpdated",
      { value?: Bytes | undefined }
    >;

    /**
     * Emit updated rotate verification key.
     **/
    RotateVerificationKeyUpdated: GenericPalletEvent<
      Rv,
      "Vector",
      "RotateVerificationKeyUpdated",
      { value?: Bytes | undefined }
    >;

    /**
     * Emit new updater.
     **/
    NewUpdater: GenericPalletEvent<
      Rv,
      "Vector",
      "NewUpdater",
      { old: H256; new: H256 }
    >;

    /**
     * Emit new SP1 verification key.
     **/
    NewSP1VerificationKey: GenericPalletEvent<
      Rv,
      "Vector",
      "NewSP1VerificationKey",
      { old: H256; new: H256 }
    >;

    /**
     * Emit when new sync committee is updated.
     **/
    SyncCommitteeHashUpdated: GenericPalletEvent<
      Rv,
      "Vector",
      "SyncCommitteeHashUpdated",
      { period: bigint; hash: H256 }
    >;

    /**
     * Emit when mocks are enabled or disabled
     **/
    MockEnabled: GenericPalletEvent<
      Rv,
      "Vector",
      "MockEnabled",
      { value: boolean }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Proxy`'s events
   **/
  proxy: {
    /**
     * A proxy was executed correctly, with the given.
     **/
    ProxyExecuted: GenericPalletEvent<
      Rv,
      "Proxy",
      "ProxyExecuted",
      { result: Result<[], DispatchError> }
    >;

    /**
     * A pure account has been created by new proxy with given
     * disambiguation index and proxy type.
     **/
    PureCreated: GenericPalletEvent<
      Rv,
      "Proxy",
      "PureCreated",
      {
        pure: AccountId32;
        who: AccountId32;
        proxyType: DaRuntimeImplsProxyType;
        disambiguationIndex: number;
      }
    >;

    /**
     * An announcement was placed to make a call in the future.
     **/
    Announced: GenericPalletEvent<
      Rv,
      "Proxy",
      "Announced",
      { real: AccountId32; proxy: AccountId32; callHash: H256 }
    >;

    /**
     * A proxy was added.
     **/
    ProxyAdded: GenericPalletEvent<
      Rv,
      "Proxy",
      "ProxyAdded",
      {
        delegator: AccountId32;
        delegatee: AccountId32;
        proxyType: DaRuntimeImplsProxyType;
        delay: number;
      }
    >;

    /**
     * A proxy was removed.
     **/
    ProxyRemoved: GenericPalletEvent<
      Rv,
      "Proxy",
      "ProxyRemoved",
      {
        delegator: AccountId32;
        delegatee: AccountId32;
        proxyType: DaRuntimeImplsProxyType;
        delay: number;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `TxPause`'s events
   **/
  txPause: {
    /**
     * This pallet, or a specific call is now paused.
     **/
    CallPaused: GenericPalletEvent<
      Rv,
      "TxPause",
      "CallPaused",
      { fullName: [Bytes, Bytes] }
    >;

    /**
     * This pallet, or a specific call is now unpaused.
     **/
    CallUnpaused: GenericPalletEvent<
      Rv,
      "TxPause",
      "CallUnpaused",
      { fullName: [Bytes, Bytes] }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `TreasuryCommittee`'s events
   **/
  treasuryCommittee: {
    /**
     * A motion (given hash) has been proposed (by given account) with a threshold (given
     * `MemberCount`).
     **/
    Proposed: GenericPalletEvent<
      Rv,
      "TreasuryCommittee",
      "Proposed",
      {
        account: AccountId32;
        proposalIndex: number;
        proposalHash: H256;
        threshold: number;
      }
    >;

    /**
     * A motion (given hash) has been voted on by given account, leaving
     * a tally (yes votes and no votes given respectively as `MemberCount`).
     **/
    Voted: GenericPalletEvent<
      Rv,
      "TreasuryCommittee",
      "Voted",
      {
        account: AccountId32;
        proposalHash: H256;
        voted: boolean;
        yes: number;
        no: number;
      }
    >;

    /**
     * A motion was approved by the required threshold.
     **/
    Approved: GenericPalletEvent<
      Rv,
      "TreasuryCommittee",
      "Approved",
      { proposalHash: H256 }
    >;

    /**
     * A motion was not approved by the required threshold.
     **/
    Disapproved: GenericPalletEvent<
      Rv,
      "TreasuryCommittee",
      "Disapproved",
      { proposalHash: H256 }
    >;

    /**
     * A motion was executed; result will be `Ok` if it returned without error.
     **/
    Executed: GenericPalletEvent<
      Rv,
      "TreasuryCommittee",
      "Executed",
      { proposalHash: H256; result: Result<[], DispatchError> }
    >;

    /**
     * A single member did some action; result will be `Ok` if it returned without error.
     **/
    MemberExecuted: GenericPalletEvent<
      Rv,
      "TreasuryCommittee",
      "MemberExecuted",
      { proposalHash: H256; result: Result<[], DispatchError> }
    >;

    /**
     * A proposal was closed because its threshold was reached or after its duration was up.
     **/
    Closed: GenericPalletEvent<
      Rv,
      "TreasuryCommittee",
      "Closed",
      { proposalHash: H256; yes: number; no: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
}
